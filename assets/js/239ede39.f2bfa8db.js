"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[80543],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},18679:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:n},t)}},34259:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(83117),r=n(67294),o=n(86010),s=n(51048),i=n(33609),l=n(1943),u=n(72957);const p="tabList__CuJ",d="tabItem_LNqP";function c(e){const{lazy:t,block:n,defaultValue:s,values:c,groupId:m,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=c??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,i.l)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const w=null===s?s:s??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==w&&!f.some((e=>e.value===w)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${w}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:_}=(0,l.U)(),[k,v]=(0,r.useState)(w),O=[],{blockElementScrollPositionUntilNextRender:C}=(0,u.o5)();if(null!=m){const e=y[m];null!=e&&e!==k&&f.some((t=>t.value===e))&&v(e)}const N=e=>{const t=e.currentTarget,n=O.indexOf(t),a=f[n].value;a!==k&&(C(t),v(a),null!=m&&_(m,String(a)))},T=e=>{let t=null;switch(e.key){case"Enter":N(e);break;case"ArrowRight":{const n=O.indexOf(e.currentTarget)+1;t=O[n]??O[0];break}case"ArrowLeft":{const n=O.indexOf(e.currentTarget)-1;t=O[n]??O[O.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},h)},f.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:e=>O.push(e),onKeyDown:T,onClick:N},s,{className:(0,o.Z)("tabs__item",d,s?.className,{"tabs__item--active":k===t})}),n??t)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==k})))))}function m(e){const t=(0,s.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},82723:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var a=n(83117),r=(n(67294),n(3905)),o=n(34259),s=n(18679);const i={title:"Ownership",slug:"/api/tutorials/owners",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/owners.md"},l="Ownership",u={unversionedId:"docs/api/tutorials/owners",id:"docs/api/tutorials/owners",title:"Ownership",description:"Why Would You Use Users and Groups?",source:"@site/genDocs/docs/api/tutorials/owners.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/owners",permalink:"/docs/next/api/tutorials/owners",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/owners.md",tags:[],version:"current",frontMatter:{title:"Ownership",slug:"/api/tutorials/owners",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/owners.md"},sidebar:"overviewSidebar",previous:{title:"Terms",permalink:"/docs/next/api/tutorials/terms"},next:{title:"Domains",permalink:"/docs/next/api/tutorials/domains"}},p={},d=[{value:"Why Would You Use Users and Groups?",id:"why-would-you-use-users-and-groups",level:2},{value:"Goal Of This Guide",id:"goal-of-this-guide",level:3},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Upsert Users",id:"upsert-users",level:2},{value:"Expected Outcomes of Upserting User",id:"expected-outcomes-of-upserting-user",level:3},{value:"Upsert Group",id:"upsert-group",level:2},{value:"Expected Outcomes of Upserting Group",id:"expected-outcomes-of-upserting-group",level:3},{value:"Read Owners",id:"read-owners",level:2},{value:"Add Owners",id:"add-owners",level:2},{value:"Expected Outcomes of Adding Owner",id:"expected-outcomes-of-adding-owner",level:2},{value:"Remove Owners",id:"remove-owners",level:2},{value:"Expected Outcomes of Removing Owners",id:"expected-outcomes-of-removing-owners",level:3}],c={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ownership"},"Ownership"),(0,r.kt)("h2",{id:"why-would-you-use-users-and-groups"},"Why Would You Use Users and Groups?"),(0,r.kt)("p",null,"Users and groups are essential for managing ownership of data.\nBy creating or updating user accounts and assigning them to appropriate groups, administrators can ensure that the right people can access the data they need to do their jobs.\nThis helps to avoid confusion or conflicts over who is responsible for specific datasets and can improve the overall effectiveness."),(0,r.kt)("h3",{id:"goal-of-this-guide"},"Goal Of This Guide"),(0,r.kt)("p",null,"This guide will show you how to"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create: create or update users and groups."),(0,r.kt)("li",{parentName:"ul"},"Read: read owners attached to a dataset."),(0,r.kt)("li",{parentName:"ul"},"Add: add user group as an owner to a dataset."),(0,r.kt)("li",{parentName:"ul"},"Remove: remove the owner from a dataset.")),(0,r.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,r.kt)("p",null,"For this tutorial, you need to deploy DataHub Quickstart and ingest sample data.\nFor detailed information, please refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/next/quickstart"},"Datahub Quickstart Guide"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In this guide, ingesting sample data is optional.")),(0,r.kt)("h2",{id:"upsert-users"},"Upsert Users"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,r.kt)("p",null,"Save this ",(0,r.kt)("inlineCode",{parentName:"p"},"user.yaml")," as a local file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'- id: bar@acryl.io\n  first_name: The\n  last_name: Bar\n  email: bar@acryl.io\n  slack: "@the_bar_raiser"\n  description: "I like raising the bar higher"\n  groups:\n    - foogroup@acryl.io\n- id: datahub\n  slack: "@datahubproject"\n  phone: "1-800-GOT-META"\n  description: "The DataHub Project"\n  picture_link: "https://raw.githubusercontent.com/datahub-project/datahub/master/datahub-web-react/src/images/datahub-logo-color-stable.svg"\n')),(0,r.kt)("p",null,"Execute the following CLI command to ingest user data.\nSince the user datahub already exists in the sample data, any updates made to the user information will overwrite the existing data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"datahub user upsert -f user.yaml\n")),(0,r.kt)("p",null,"If you see the following logs, the operation was successful:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"Update succeeded for urn urn:li:corpuser:bar@acryl.io.\nUpdate succeeded for urn urn:li:corpuser:datahub.\n"))),(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/upsert_user.py\nimport logging\n\nfrom datahub.api.entities.corpuser.corpuser import CorpUser, CorpUserGenerationConfig\nfrom datahub.ingestion.graph.client import DataHubGraph, DataHubGraphConfig\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nuser_email = "bar@acryl.io"\n\nuser: CorpUser = CorpUser(\n    id=user_email,\n    display_name="The Bar",\n    email=user_email,\n    title="Software Engineer",\n    first_name="The",\n    last_name="Bar",\n    full_name="The Bar",\n)\n\n# Create graph client\ndatahub_graph = DataHubGraph(DataHubGraphConfig(server="http://localhost:8080"))\nfor event in user.generate_mcp(\n    generation_config=CorpUserGenerationConfig(override_editable=False)\n):\n    datahub_graph.emit(event)\nlog.info(f"Upserted user {user.urn}")\n\n')))),(0,r.kt)("h3",{id:"expected-outcomes-of-upserting-user"},"Expected Outcomes of Upserting User"),(0,r.kt)("p",null,"You can see the user ",(0,r.kt)("inlineCode",{parentName:"p"},"The bar")," has been created and the user ",(0,r.kt)("inlineCode",{parentName:"p"},"Datahub")," has been updated under ",(0,r.kt)("inlineCode",{parentName:"p"},"Settings > Access > Users & Groups")),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/user-upserted.png"})),(0,r.kt)("h2",{id:"upsert-group"},"Upsert Group"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,r.kt)("p",null,"Save this ",(0,r.kt)("inlineCode",{parentName:"p"},"group.yaml")," as a local file. Note that the group includes a list of users who are owners and members.\nWithin these lists, you can refer to the users by their ids or their urns, and can additionally specify their metadata inline within the group description itself. See the example below to understand how this works and feel free to make modifications to this file locally to see the effects of your changes in your local DataHub instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'id: foogroup@acryl.io\ndisplay_name: Foo Group\nowners:\n  - datahub\nmembers:\n  - bar@acryl.io # refer to a user either by id or by urn\n  - id: joe@acryl.io # inline specification of user\n    slack: "@joe_shmoe"\n    display_name: "Joe\'s Hub"\n')),(0,r.kt)("p",null,"Execute the following CLI command to ingest this group's information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"datahub group upsert -f group.yaml\n")),(0,r.kt)("p",null,"If you see the following logs, the operation was successful:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"Update succeeded for group urn:li:corpGroup:foogroup@acryl.io.\n"))),(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/upsert_group.py\nimport logging\n\nfrom datahub.api.entities.corpgroup.corpgroup import (\n    CorpGroup,\n    CorpGroupGenerationConfig,\n)\nfrom datahub.ingestion.graph.client import DataHubGraph, DataHubGraphConfig\nfrom datahub.utilities.urns.corpuser_urn import CorpuserUrn\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\ngroup_email = "foogroup@acryl.io"\ngroup = CorpGroup(\n    id=group_email,\n    owners=[str(CorpuserUrn.create_from_id("datahub"))],\n    members=[\n        str(CorpuserUrn.create_from_id("bar@acryl.io")),\n        str(CorpuserUrn.create_from_id("joe@acryl.io")),\n    ],\n    display_name="Foo Group",\n    email=group_email,\n    description="Software engineering team",\n    slack="@foogroup",\n)\n\n# Create graph client\ndatahub_graph = DataHubGraph(DataHubGraphConfig(server="http://localhost:8080"))\n\nfor event in group.generate_mcp(\n    generation_config=CorpGroupGenerationConfig(\n        override_editable=False, datahub_graph=datahub_graph\n    )\n):\n    datahub_graph.emit(event)\nlog.info(f"Upserted group {group.urn}")\n\n')))),(0,r.kt)("h3",{id:"expected-outcomes-of-upserting-group"},"Expected Outcomes of Upserting Group"),(0,r.kt)("p",null,"You can see the group ",(0,r.kt)("inlineCode",{parentName:"p"},"Foo Group")," has been created under ",(0,r.kt)("inlineCode",{parentName:"p"},"Settings > Access > Users & Groups")),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/group-upserted.png"})),(0,r.kt)("h2",{id:"read-owners"},"Read Owners"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'query {\n  dataset(urn: "urn:li:dataset:(urn:li:dataPlatform:hive,SampleHiveDataset,PROD)") {\n    ownership {\n      owners {\n        owner {\n          ... on CorpUser {\n            urn\n            type\n          }\n          ... on CorpGroup {\n            urn\n            type\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"If you see the following response, the operation was successful:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "dataset": {\n      "ownership": {\n        "owners": [\n          {\n            "owner": {\n              "urn": "urn:li:corpuser:jdoe",\n              "type": "CORP_USER"\n            }\n          },\n          {\n            "owner": {\n              "urn": "urn:li:corpuser:datahub",\n              "type": "CORP_USER"\n            }\n          }\n        ]\n      }\n    }\n  },\n  "extensions": {}\n}\n'))),(0,r.kt)(s.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl --location --request POST 'http://localhost:8080/api/graphql' \\\n--header 'Authorization: Bearer <my-access-token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"query\": \"{ dataset(urn: \\\"urn:li:dataset:(urn:li:dataPlatform:hive,SampleHiveDataset,PROD)\\\") { ownership { owners { owner { ... on CorpUser { urn type } ... on CorpGroup { urn type } } } } } }\", \"variables\":{}}'\n")),(0,r.kt)("p",null,"Expected Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "dataset": {\n      "ownership": {\n        "owners": [\n          { "owner": { "urn": "urn:li:corpuser:jdoe", "type": "CORP_USER" } },\n          { "owner": { "urn": "urn:li:corpuser:datahub", "type": "CORP_USER" } }\n        ]\n      }\n    }\n  },\n  "extensions": {}\n}\n'))),(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_query_owners.py\nfrom datahub.emitter.mce_builder import make_dataset_urn\n\n# read-modify-write requires access to the DataHubGraph (RestEmitter is not enough)\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import OwnershipClass\n\ndataset_urn = make_dataset_urn(platform="hive", name="SampleHiveDataset", env="PROD")\n\ngms_endpoint = "http://localhost:8080"\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\n\n# Query multiple aspects from entity\nresult = graph.get_aspects_for_entity(\n    entity_urn=dataset_urn,\n    aspects=["ownership"],\n    aspect_types=[OwnershipClass],\n)\n\nprint(result)\n\n')))),(0,r.kt)("h2",{id:"add-owners"},"Add Owners"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'mutation addOwners {\n    addOwner(\n      input: {\n        ownerUrn: "urn:li:corpGroup:bfoo",\n        resourceUrn: "urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD)",\n        ownerEntityType: CORP_GROUP,\n        type: TECHNICAL_OWNER\n            }\n    )\n}\n')),(0,r.kt)("p",null,"Expected Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'{\n  "data": {\n    "addOwner": true\n  },\n  "extensions": {}\n}\n'))),(0,r.kt)(s.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{ "query": "mutation addOwners { addOwner(input: { ownerUrn: \\"urn:li:corpGroup:bfoo\\", resourceUrn: \\"urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD)\\", ownerEntityType: CORP_GROUP, type: TECHNICAL_OWNER }) }", "variables":{}}\'\n'))),(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_add_owner.py\nimport logging\nfrom typing import Optional\n\nfrom datahub.emitter.mce_builder import make_dataset_urn, make_user_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\n\n# read-modify-write requires access to the DataHubGraph (RestEmitter is not enough)\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import (\n    OwnerClass,\n    OwnershipClass,\n    OwnershipTypeClass,\n)\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n\n# Inputs -> owner, ownership_type, dataset\nowner_to_add = make_user_urn("jdoe")\nownership_type = OwnershipTypeClass.TECHNICAL_OWNER\ndataset_urn = make_dataset_urn(platform="hive", name="realestate_db.sales", env="PROD")\n\n# Some objects to help with conditional pathways later\nowner_class_to_add = OwnerClass(owner=owner_to_add, type=ownership_type)\nownership_to_add = OwnershipClass(owners=[owner_class_to_add])\n\n\n# First we get the current owners\ngms_endpoint = "http://localhost:8080"\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\n\n\ncurrent_owners: Optional[OwnershipClass] = graph.get_aspect(\n    entity_urn=dataset_urn, aspect_type=OwnershipClass\n)\n\n\nneed_write = False\nif current_owners:\n    if (owner_to_add, ownership_type) not in [\n        (x.owner, x.type) for x in current_owners.owners\n    ]:\n        # owners exist, but this owner is not present in the current owners\n        current_owners.owners.append(owner_class_to_add)\n        need_write = True\nelse:\n    # create a brand new ownership aspect\n    current_owners = ownership_to_add\n    need_write = True\n\nif need_write:\n    event: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n        entityUrn=dataset_urn,\n        aspect=current_owners,\n    )\n    graph.emit(event)\n    log.info(\n        f"Owner {owner_to_add}, type {ownership_type} added to dataset {dataset_urn}"\n    )\n\nelse:\n    log.info(f"Owner {owner_to_add} already exists, omitting write")\n\n')))),(0,r.kt)("h2",{id:"expected-outcomes-of-adding-owner"},"Expected Outcomes of Adding Owner"),(0,r.kt)("p",null,"You can now see ",(0,r.kt)("inlineCode",{parentName:"p"},"bfoo")," has been added as an owner to the ",(0,r.kt)("inlineCode",{parentName:"p"},"fct_users_created")," dataset."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/owner-added.png"})),(0,r.kt)("h2",{id:"remove-owners"},"Remove Owners"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"graphql",label:"GraphQL",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation removeOwners {\n    removeOwner(\n      input: {\n        ownerUrn: "urn:li:corpuser:jdoe",\n        resourceUrn: "urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)",\n            }\n    )\n}\n')),(0,r.kt)("p",null,"Note that you can also remove owners from multiple entities or subresource using ",(0,r.kt)("inlineCode",{parentName:"p"},"batchRemoveOwners"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation batchRemoveOwners {\n    batchRemoveOwners(\n      input: {\n        ownerUrns: ["urn:li:corpuser:jdoe"],\n        resources: [\n          { resourceUrn:"urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)"} ,\n          { resourceUrn:"urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD)"} ,]\n      }\n    )\n}\n')),(0,r.kt)("p",null,"Expected Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'{\n  "data": {\n    "removeOwner": true\n  },\n  "extensions": {}\n}\n'))),(0,r.kt)(s.Z,{value:"curl",label:"Curl",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl --location --request POST \'http://localhost:8080/api/graphql\' \\\n--header \'Authorization: Bearer <my-access-token>\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{ "query": "mutation removeOwner { removeOwner(input: { ownerUrn: \\"urn:li:corpuser:jdoe\\", resourceUrn: \\"urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)\\" }) }", "variables":{}}\'\n'))),(0,r.kt)(s.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_remove_owner_execute_graphql.py\n# read-modify-write requires access to the DataHubGraph (RestEmitter is not enough)\nfrom datahub.ingestion.graph.client import DatahubClientConfig, DataHubGraph\n\ngms_endpoint = "http://localhost:8080"\ngraph = DataHubGraph(DatahubClientConfig(server=gms_endpoint))\n\n# Query multiple aspects from entity\nquery = """\nmutation batchRemoveOwners {\n    batchRemoveOwners(\n      input: {\n        ownerUrns: ["urn:li:corpuser:jdoe"],\n        resources: [\n          { resourceUrn:"urn:li:dataset:(urn:li:dataPlatform:hdfs,SampleHdfsDataset,PROD)"} ,\n          { resourceUrn:"urn:li:dataset:(urn:li:dataPlatform:hive,fct_users_created,PROD)"} ,]\n      }\n    )\n}\n"""\nresult = graph.execute_graphql(query=query)\n\nprint(result)\n\n')))),(0,r.kt)("h3",{id:"expected-outcomes-of-removing-owners"},"Expected Outcomes of Removing Owners"),(0,r.kt)("p",null,"You can now see ",(0,r.kt)("inlineCode",{parentName:"p"},"John Doe")," has been removed as an owner from the ",(0,r.kt)("inlineCode",{parentName:"p"},"fct_users_created")," dataset."),(0,r.kt)("p",{align:"center"},(0,r.kt)("img",{width:"70%",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/apis/tutorials/owner-removed.png"})))}m.isMDXComponent=!0}}]);