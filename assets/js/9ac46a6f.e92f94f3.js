"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[23065],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>b});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),s=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(a),p=n,b=d["".concat(c,".").concat(p)]||d[p]||m[p]||o;return a?r.createElement(b,i(i({ref:t},u),{},{components:a})):r.createElement(b,i({ref:t},u))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},65386:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>b,frontMatter:()=>l,metadata:()=>s,toc:()=>d});a(67294);var r=a(3905);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}const l={title:"metadata-jobs:mae-consumer-job",sidebar_label:"metadata-jobs:mae-consumer-job",slug:"/metadata-jobs/mae-consumer-job",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-jobs/mae-consumer-job/README.md"},c="Metadata Audit Event Consumer Job",s={unversionedId:"metadata-jobs/mae-consumer-job/README",id:"version-0.12.1/metadata-jobs/mae-consumer-job/README",title:"metadata-jobs:mae-consumer-job",description:"The Metadata Audit Event Consumer is a Spring job which can be deployed by itself, or as part of the Metadata Service.",source:"@site/versioned_docs/version-0.12.1/metadata-jobs/mae-consumer-job/README.md",sourceDirName:"metadata-jobs/mae-consumer-job",slug:"/metadata-jobs/mae-consumer-job",permalink:"/docs/0.12.1/metadata-jobs/mae-consumer-job",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/metadata-jobs/mae-consumer-job/README.md",tags:[],version:"0.12.1",frontMatter:{title:"metadata-jobs:mae-consumer-job",sidebar_label:"metadata-jobs:mae-consumer-job",slug:"/metadata-jobs/mae-consumer-job",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/metadata-jobs/mae-consumer-job/README.md"},sidebar:"overviewSidebar",previous:{title:"metadata-service",permalink:"/docs/0.12.1/metadata-service"},next:{title:"metadata-jobs:mce-consumer-job",permalink:"/docs/0.12.1/metadata-jobs/mce-consumer-job"}},u={},d=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Build",id:"build",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Start via Docker image",id:"start-via-docker-image",level:2},{value:"Start via command line",id:"start-via-command-line",level:2},{value:"Endpoints",id:"endpoints",level:2}],m={toc:d},p="wrapper";function b(e){var{components:t}=e,a=i(e,["components"]);return(0,r.kt)(p,o(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},r=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),r.forEach((function(t){n(e,t,a[t])}))}return e}({},m,a),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"metadata-audit-event-consumer-job"},"Metadata Audit Event Consumer Job"),(0,r.kt)("p",null,"The Metadata Audit Event Consumer is a Spring job which can be deployed by itself, or as part of the Metadata Service."),(0,r.kt)("p",null,"Its main function is to listen to change log events emitted as a result of changes made to the Metadata Graph, converting changes in the metadata model into updates\nagainst secondary search & graph indexes (among other things)"),(0,r.kt)("p",null,"Today the job consumes from two important Kafka topics:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"MetadataChangeLog_Versioned_v1")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"MetadataChangeLog_Timeseries_v1"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Where does the name ",(0,r.kt)("strong",{parentName:"p"},"Metadata Audit Event")," come from? Well, history. Previously, this job consumed\na single ",(0,r.kt)("inlineCode",{parentName:"p"},"MetadataAuditEvent")," topic which has been deprecated and removed from the critical path. Hence, the name!")),(0,r.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You need to have ",(0,r.kt)("a",{parentName:"li",href:"https://www.oracle.com/java/technologies/jdk8-downloads.html"},"JDK8"),"\ninstalled on your machine to be able to build ",(0,r.kt)("inlineCode",{parentName:"li"},"DataHub Metadata Service"),".")),(0,r.kt)("h2",{id:"build"},"Build"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Metadata Audit Event Consumer Job")," is already built as part of top level build:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./gradlew build\n")),(0,r.kt)("p",null,"However, if you only want to build ",(0,r.kt)("inlineCode",{parentName:"p"},"MAE Consumer Job")," specifically:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./gradlew :metadata-jobs:mae-consumer-job:build\n")),(0,r.kt)("h2",{id:"dependencies"},"Dependencies"),(0,r.kt)("p",null,"Before starting ",(0,r.kt)("inlineCode",{parentName:"p"},"Metadata Audit Event Consumer Job"),", you need to make sure that ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/docker/kafka-setup"},"Kafka, Schema Registry & Zookeeper"),",\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/docker/elasticsearch"},"Elasticsearch"),", and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/docker/neo4j"},"Neo4j")," Docker containers are up and running."),(0,r.kt)("h2",{id:"start-via-docker-image"},"Start via Docker image"),(0,r.kt)("p",null,"The quickest way to try out ",(0,r.kt)("inlineCode",{parentName:"p"},"Metadata Audit Event Consumer Job")," is running the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/docker/datahub-mae-consumer"},"Docker image"),"."),(0,r.kt)("h2",{id:"start-via-command-line"},"Start via command line"),(0,r.kt)("p",null,"If you do modify things and want to try it out quickly without building the Docker image, you can also run\nthe application directly from command line after a successful ",(0,r.kt)("a",{parentName:"p",href:"#build"},"build"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MCL_CONSUMER_ENABLED=true ./gradlew :metadata-jobs:mae-consumer-job:bootRun\n")),(0,r.kt)("h2",{id:"endpoints"},"Endpoints"),(0,r.kt)("p",null,"Spring boot actuator has been enabled for MAE Application.\n",(0,r.kt)("inlineCode",{parentName:"p"},"healthcheck"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"metrics")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"info")," web endpoints are enabled by default."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"healthcheck")," - http://localhost:9091/actuator/health"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"metrics")," - http://localhost:9091/actuator/metrics"),(0,r.kt)("p",null,"To retrieve a specific metric - http://localhost:9091/actuator/metrics/process.uptime"))}b.isMDXComponent=!0}}]);