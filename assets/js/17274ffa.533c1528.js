"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[92057],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>v});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(r),m=n,v=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return r?a.createElement(v,i(i({ref:t},u),{},{components:r})):a.createElement(v,i({ref:t},u))}));function v(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},68939:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>v,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const o={title:"Evaluate Tests Endpoint",slug:"/api/restli/evaluate-tests",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/restli/evaluate-tests.md"},i="Evaluate Tests Endpoint",s={unversionedId:"docs/api/restli/evaluate-tests",id:"version-0.12.0/docs/api/restli/evaluate-tests",title:"Evaluate Tests Endpoint",description:"You can do a HTTP POST request to /gms/test?action=evaluate endpoint with the urn as part of JSON Payload to run metadata tests for the particular URN.",source:"@site/versioned_docs/version-0.12.0/docs/api/restli/evaluate-tests.md",sourceDirName:"docs/api/restli",slug:"/api/restli/evaluate-tests",permalink:"/docs/0.12.0/api/restli/evaluate-tests",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/restli/evaluate-tests.md",tags:[],version:"0.12.0",frontMatter:{title:"Evaluate Tests Endpoint",slug:"/api/restli/evaluate-tests",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/restli/evaluate-tests.md"},sidebar:"overviewSidebar",previous:{title:"Get ElasticSearch Task Status Endpoint",permalink:"/docs/0.12.0/api/restli/get-elastic-task-status"},next:{title:"Aspect Versioning",permalink:"/docs/0.12.0/advanced/aspect-versioning"}},l={},p=[],u=(c="FeatureAvailability",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",e)});var c;const d={toc:p},m="wrapper";function v(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"evaluate-tests-endpoint"},"Evaluate Tests Endpoint"),(0,n.kt)(u,{saasOnly:!0,mdxType:"FeatureAvailability"}),(0,n.kt)("p",null,"You can do a HTTP POST request to ",(0,n.kt)("inlineCode",{parentName:"p"},"/gms/test?action=evaluate")," endpoint with the ",(0,n.kt)("inlineCode",{parentName:"p"},"urn")," as part of JSON Payload to run metadata tests for the particular URN."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"curl --location --request POST 'https://DOMAIN.acryl.io/gms/test?action=evaluate' \\\n--header 'Authorization: Bearer TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"urn\": \"YOUR_URN\"\n}'\n")),(0,n.kt)("p",null,"w\nThe supported parameters are"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"urn")," - Required URN string"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"push")," - Optional Boolean - whether or not to push the results to persist them. Default ",(0,n.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"testUrns")," - Optional List of string - If you wish to get specific test URNs evaluated")))}v.isMDXComponent=!0}}]);