"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[20301],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>y});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),l=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},d=function(t){var e=l(t.components);return a.createElement(c.Provider,{value:e},t.children)},p="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),p=l(n),u=r,y=p["".concat(c,".").concat(u)]||p[u]||m[u]||o;return n?a.createElement(y,s(s({ref:e},d),{},{components:n})):a.createElement(y,s({ref:e},d))}));function y(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[p]="string"==typeof t?t:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},80917:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:32,title:"DataContract",slug:"/generated/metamodel/entities/datacontract",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataContract.md"},s="DataContract",i={unversionedId:"docs/generated/metamodel/entities/dataContract",id:"docs/generated/metamodel/entities/dataContract",title:"DataContract",description:"Aspects",source:"@site/genDocs/docs/generated/metamodel/entities/dataContract.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/datacontract",permalink:"/docs/next/generated/metamodel/entities/datacontract",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataContract.md",tags:[],version:"current",sidebarPosition:32,frontMatter:{sidebar_position:32,title:"DataContract",slug:"/generated/metamodel/entities/datacontract",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataContract.md"},sidebar:"overviewSidebar",previous:{title:"OwnershipType",permalink:"/docs/next/generated/metamodel/entities/ownershiptype"},next:{title:"EntityType",permalink:"/docs/next/generated/metamodel/entities/entitytype"}},c={},l=[{value:"Aspects",id:"aspects",level:2},{value:"dataContractProperties",id:"datacontractproperties",level:3},{value:"dataContractStatus",id:"datacontractstatus",level:3},{value:"status",id:"status",level:3},{value:"Relationships",id:"relationships",level:2},{value:"Outgoing",id:"outgoing",level:3},{value:"Global Metadata Model",id:"global-metadata-model",level:2}],d={toc:l},p="wrapper";function m(t){let{components:e,...n}=t;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"datacontract"},"DataContract"),(0,r.kt)("h2",{id:"aspects"},"Aspects"),(0,r.kt)("h3",{id:"datacontractproperties"},"dataContractProperties"),(0,r.kt)("p",null,"Information about a data contract"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dataContractProperties"\n  },\n  "name": "DataContractProperties",\n  "namespace": "com.linkedin.datacontract",\n  "fields": [\n    {\n      "Relationship": {\n        "entityTypes": [\n          "dataset"\n        ],\n        "name": "ContractFor"\n      },\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": "string",\n      "name": "entity",\n      "doc": "The entity that this contract is associated with. Currently, we only support Dataset contracts, but\\nin the future we may also support Data Product level contracts."\n    },\n    {\n      "Relationship": {\n        "/*/assertion": {\n          "entityTypes": [\n            "assertion"\n          ],\n          "name": "IncludesSchemaAssertion"\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": {\n            "type": "record",\n            "name": "SchemaContract",\n            "namespace": "com.linkedin.datacontract",\n            "fields": [\n              {\n                "java": {\n                  "class": "com.linkedin.common.urn.Urn"\n                },\n                "type": "string",\n                "name": "assertion",\n                "doc": "The assertion representing the schema contract."\n              }\n            ],\n            "doc": "Expectations for a logical schema"\n          }\n        }\n      ],\n      "name": "schema",\n      "default": null,\n      "doc": "An optional set of schema contracts. If this is a dataset contract, there will only be one."\n    },\n    {\n      "Relationship": {\n        "/*/assertion": {\n          "entityTypes": [\n            "assertion"\n          ],\n          "name": "IncludesFreshnessAssertion"\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": {\n            "type": "record",\n            "name": "FreshnessContract",\n            "namespace": "com.linkedin.datacontract",\n            "fields": [\n              {\n                "java": {\n                  "class": "com.linkedin.common.urn.Urn"\n                },\n                "type": "string",\n                "name": "assertion",\n                "doc": "The assertion representing the SLA contract."\n              }\n            ],\n            "doc": "A contract pertaining to the operational SLAs of a physical data asset"\n          }\n        }\n      ],\n      "name": "freshness",\n      "default": null,\n      "doc": "An optional set of FRESHNESS contracts. If this is a dataset contract, there will only be one."\n    },\n    {\n      "Relationship": {\n        "/*/assertion": {\n          "entityTypes": [\n            "assertion"\n          ],\n          "name": "IncludesDataQualityAssertion"\n        }\n      },\n      "type": [\n        "null",\n        {\n          "type": "array",\n          "items": {\n            "type": "record",\n            "name": "DataQualityContract",\n            "namespace": "com.linkedin.datacontract",\n            "fields": [\n              {\n                "java": {\n                  "class": "com.linkedin.common.urn.Urn"\n                },\n                "type": "string",\n                "name": "assertion",\n                "doc": "The assertion representing the Data Quality contract.\\nE.g. a table or column-level assertion."\n              }\n            ],\n            "doc": "A data quality contract pertaining to a physical data asset\\nData Quality contracts are used to make assertions about data quality metrics for a physical data asset"\n          }\n        }\n      ],\n      "name": "dataQuality",\n      "default": null,\n      "doc": "An optional set of Data Quality contracts, e.g. table and column level contract constraints."\n    },\n    {\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "rawContract",\n      "default": null,\n      "doc": "YAML-formatted contract definition"\n    }\n  ],\n  "doc": "Information about a data contract"\n}\n'))),(0,r.kt)("h3",{id:"datacontractstatus"},"dataContractStatus"),(0,r.kt)("p",null,"Information about the status of a data contract"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dataContractStatus"\n  },\n  "name": "DataContractStatus",\n  "namespace": "com.linkedin.datacontract",\n  "fields": [\n    {\n      "Searchable": {\n        "/*": {\n          "fieldType": "TEXT",\n          "queryByDefault": true\n        }\n      },\n      "type": {\n        "type": "map",\n        "values": "string"\n      },\n      "name": "customProperties",\n      "default": {},\n      "doc": "Custom property bag."\n    },\n    {\n      "Searchable": {},\n      "type": {\n        "type": "enum",\n        "symbolDocs": {\n          "ACTIVE": "The data contract is active.",\n          "PENDING": "The data contract is pending implementation."\n        },\n        "name": "DataContractState",\n        "namespace": "com.linkedin.datacontract",\n        "symbols": [\n          "ACTIVE",\n          "PENDING"\n        ]\n      },\n      "name": "state",\n      "doc": "The latest state of the data contract"\n    }\n  ],\n  "doc": "Information about the status of a data contract"\n}\n'))),(0,r.kt)("h3",{id:"status"},"status"),(0,r.kt)("p",null,"The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\nThis aspect is used to represent soft deletes conventionally."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "status"\n  },\n  "name": "Status",\n  "namespace": "com.linkedin.common",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "BOOLEAN"\n      },\n      "type": "boolean",\n      "name": "removed",\n      "default": false,\n      "doc": "Whether the entity has been removed (soft-deleted)."\n    }\n  ],\n  "doc": "The lifecycle status metadata of an entity, e.g. dataset, metric, feature, etc.\\nThis aspect is used to represent soft deletes conventionally."\n}\n'))),(0,r.kt)("h2",{id:"relationships"},"Relationships"),(0,r.kt)("h3",{id:"outgoing"},"Outgoing"),(0,r.kt)("p",null,"These are the relationships stored in this entity's aspects"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ContractFor"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Dataset via ",(0,r.kt)("inlineCode",{parentName:"li"},"dataContractProperties.entity")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"IncludesSchemaAssertion"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Assertion via ",(0,r.kt)("inlineCode",{parentName:"li"},"dataContractProperties.schema")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"IncludesFreshnessAssertion"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Assertion via ",(0,r.kt)("inlineCode",{parentName:"li"},"dataContractProperties.freshness")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"IncludesDataQualityAssertion"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Assertion via ",(0,r.kt)("inlineCode",{parentName:"li"},"dataContractProperties.dataQuality"))))),(0,r.kt)("h2",{id:"global-metadata-model"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/datahub-project/static-assets/raw/main/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}m.isMDXComponent=!0}}]);