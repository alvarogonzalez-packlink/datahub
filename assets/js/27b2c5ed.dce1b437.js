"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[46806],{3905:(t,l,e)=>{e.d(l,{Zo:()=>i,kt:()=>h});var n=e(67294);function r(t,l,e){return l in t?Object.defineProperty(t,l,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[l]=e,t}function u(t,l){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);l&&(n=n.filter((function(l){return Object.getOwnPropertyDescriptor(t,l).enumerable}))),e.push.apply(e,n)}return e}function a(t){for(var l=1;l<arguments.length;l++){var e=null!=arguments[l]?arguments[l]:{};l%2?u(Object(e),!0).forEach((function(l){r(t,l,e[l])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):u(Object(e)).forEach((function(l){Object.defineProperty(t,l,Object.getOwnPropertyDescriptor(e,l))}))}return t}function o(t,l){if(null==t)return{};var e,n,r=function(t,l){if(null==t)return{};var e,n,r={},u=Object.keys(t);for(n=0;n<u.length;n++)e=u[n],l.indexOf(e)>=0||(r[e]=t[e]);return r}(t,l);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(t);for(n=0;n<u.length;n++)e=u[n],l.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var k=n.createContext({}),s=function(t){var l=n.useContext(k),e=l;return t&&(e="function"==typeof t?t(l):a(a({},l),t)),e},i=function(t){var l=s(t.components);return n.createElement(k.Provider,{value:l},t.children)},d="mdxType",p={inlineCode:"code",wrapper:function(t){var l=t.children;return n.createElement(n.Fragment,{},l)}},c=n.forwardRef((function(t,l){var e=t.components,r=t.mdxType,u=t.originalType,k=t.parentName,i=o(t,["components","mdxType","originalType","parentName"]),d=s(e),c=r,h=d["".concat(k,".").concat(c)]||d[c]||p[c]||u;return e?n.createElement(h,a(a({ref:l},i),{},{components:e})):n.createElement(h,a({ref:l},i))}));function h(t,l){var e=arguments,r=l&&l.mdxType;if("string"==typeof t||r){var u=e.length,a=new Array(u);a[0]=c;var o={};for(var k in l)hasOwnProperty.call(l,k)&&(o[k]=l[k]);o.originalType=t,o[d]="string"==typeof t?t:r,a[1]=o;for(var s=2;s<u;s++)a[s]=e[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,e)}c.displayName="MDXCreateElement"},34678:(t,l,e)=>{e.r(l),e.d(l,{assets:()=>i,contentTitle:()=>k,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});e(67294);var n=e(3905);function r(t,l,e){return l in t?Object.defineProperty(t,l,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[l]=e,t}function u(t,l){return l=null!=l?l:{},Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(l)):function(t,l){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);l&&(n=n.filter((function(l){return Object.getOwnPropertyDescriptor(t,l).enumerable}))),e.push.apply(e,n)}return e}(Object(l)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(l,e))})),t}function a(t,l){if(null==t)return{};var e,n,r=function(t,l){if(null==t)return{};var e,n,r={},u=Object.keys(t);for(n=0;n<u.length;n++)e=u[n],l.indexOf(e)>=0||(r[e]=t[e]);return r}(t,l);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(t);for(n=0;n<u.length;n++)e=u[n],l.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}const o={id:"inputObjects",title:"Input objects",slug:"inputObjects",sidebar_position:7},k=void 0,s={unversionedId:"graphql/inputObjects",id:"graphql/inputObjects",title:"Input objects",description:"AcceptRoleInput",source:"@site/genDocs/graphql/inputObjects.md",sourceDirName:"graphql",slug:"/graphql/inputObjects",permalink:"/docs/next/graphql/inputObjects",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/genDocs/graphql/inputObjects.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"inputObjects",title:"Input objects",slug:"inputObjects",sidebar_position:7},sidebar:"overviewSidebar",previous:{title:"Objects",permalink:"/docs/next/graphql/objects"},next:{title:"Interfaces",permalink:"/docs/next/graphql/interfaces"}},i={},d=[{value:"AcceptRoleInput",id:"acceptroleinput",level:2},{value:"ActorFilterInput",id:"actorfilterinput",level:2},{value:"AddGroupMembersInput",id:"addgroupmembersinput",level:2},{value:"AddLinkInput",id:"addlinkinput",level:2},{value:"AddNativeGroupMembersInput",id:"addnativegroupmembersinput",level:2},{value:"AddOwnerInput",id:"addownerinput",level:2},{value:"AddOwnersInput",id:"addownersinput",level:2},{value:"AddTagsInput",id:"addtagsinput",level:2},{value:"AddTermsInput",id:"addtermsinput",level:2},{value:"AggregateAcrossEntitiesInput",id:"aggregateacrossentitiesinput",level:2},{value:"AndFilterInput",id:"andfilterinput",level:2},{value:"AspectParams",id:"aspectparams",level:2},{value:"AutoCompleteInput",id:"autocompleteinput",level:2},{value:"AutoCompleteMultipleInput",id:"autocompletemultipleinput",level:2},{value:"BatchAddOwnersInput",id:"batchaddownersinput",level:2},{value:"BatchAddTagsInput",id:"batchaddtagsinput",level:2},{value:"BatchAddTermsInput",id:"batchaddtermsinput",level:2},{value:"BatchAssignFormInput",id:"batchassignforminput",level:2},{value:"BatchAssignRoleInput",id:"batchassignroleinput",level:2},{value:"BatchDatasetUpdateInput",id:"batchdatasetupdateinput",level:2},{value:"BatchGetStepStatesInput",id:"batchgetstepstatesinput",level:2},{value:"BatchRemoveFormInput",id:"batchremoveforminput",level:2},{value:"BatchRemoveOwnersInput",id:"batchremoveownersinput",level:2},{value:"BatchRemoveTagsInput",id:"batchremovetagsinput",level:2},{value:"BatchRemoveTermsInput",id:"batchremovetermsinput",level:2},{value:"BatchSetDataProductInput",id:"batchsetdataproductinput",level:2},{value:"BatchSetDomainInput",id:"batchsetdomaininput",level:2},{value:"BatchUpdateDeprecationInput",id:"batchupdatedeprecationinput",level:2},{value:"BatchUpdateSoftDeletedInput",id:"batchupdatesoftdeletedinput",level:2},{value:"BatchUpdateStepStatesInput",id:"batchupdatestepstatesinput",level:2},{value:"BrowseInput",id:"browseinput",level:2},{value:"BrowsePathsInput",id:"browsepathsinput",level:2},{value:"BrowseV2Input",id:"browsev2input",level:2},{value:"CancelIngestionExecutionRequestInput",id:"cancelingestionexecutionrequestinput",level:2},{value:"ChartEditablePropertiesUpdate",id:"charteditablepropertiesupdate",level:2},{value:"ChartUpdateInput",id:"chartupdateinput",level:2},{value:"ContainerEntitiesInput",id:"containerentitiesinput",level:2},{value:"CorpGroupUpdateInput",id:"corpgroupupdateinput",level:2},{value:"CorpUserUpdateInput",id:"corpuserupdateinput",level:2},{value:"CreateAccessTokenInput",id:"createaccesstokeninput",level:2},{value:"CreateDataProductInput",id:"createdataproductinput",level:2},{value:"CreateDataProductPropertiesInput",id:"createdataproductpropertiesinput",level:2},{value:"CreateDomainInput",id:"createdomaininput",level:2},{value:"CreateDynamicFormAssignmentInput",id:"createdynamicformassignmentinput",level:2},{value:"CreateGlossaryEntityInput",id:"createglossaryentityinput",level:2},{value:"CreateGroupInput",id:"creategroupinput",level:2},{value:"CreateIngestionExecutionRequestInput",id:"createingestionexecutionrequestinput",level:2},{value:"CreateInviteTokenInput",id:"createinvitetokeninput",level:2},{value:"CreateNativeUserResetTokenInput",id:"createnativeuserresettokeninput",level:2},{value:"CreateOwnershipTypeInput",id:"createownershiptypeinput",level:2},{value:"CreatePostInput",id:"createpostinput",level:2},{value:"CreateQueryInput",id:"createqueryinput",level:2},{value:"CreateQueryPropertiesInput",id:"createquerypropertiesinput",level:2},{value:"CreateQuerySubjectInput",id:"createquerysubjectinput",level:2},{value:"CreateSecretInput",id:"createsecretinput",level:2},{value:"CreateTagInput",id:"createtaginput",level:2},{value:"CreateTestConnectionRequestInput",id:"createtestconnectionrequestinput",level:2},{value:"CreateTestInput",id:"createtestinput",level:2},{value:"CreateViewInput",id:"createviewinput",level:2},{value:"DashboardEditablePropertiesUpdate",id:"dashboardeditablepropertiesupdate",level:2},{value:"DashboardUpdateInput",id:"dashboardupdateinput",level:2},{value:"DataFlowEditablePropertiesUpdate",id:"datafloweditablepropertiesupdate",level:2},{value:"DataFlowUpdateInput",id:"dataflowupdateinput",level:2},{value:"DataHubViewDefinitionInput",id:"datahubviewdefinitioninput",level:2},{value:"DataHubViewFilterInput",id:"datahubviewfilterinput",level:2},{value:"DataJobEditablePropertiesUpdate",id:"datajobeditablepropertiesupdate",level:2},{value:"DataJobUpdateInput",id:"datajobupdateinput",level:2},{value:"DataProductEntitiesInput",id:"dataproductentitiesinput",level:2},{value:"DatasetDeprecationUpdate",id:"datasetdeprecationupdate",level:2},{value:"DatasetEditablePropertiesUpdate",id:"dataseteditablepropertiesupdate",level:2},{value:"DatasetFilterInput",id:"datasetfilterinput",level:2},{value:"DatasetUpdateInput",id:"datasetupdateinput",level:2},{value:"DescriptionUpdateInput",id:"descriptionupdateinput",level:2},{value:"DomainEntitiesInput",id:"domainentitiesinput",level:2},{value:"EditableSchemaFieldInfoUpdate",id:"editableschemafieldinfoupdate",level:2},{value:"EditableSchemaMetadataUpdate",id:"editableschemametadataupdate",level:2},{value:"EntityCountInput",id:"entitycountinput",level:2},{value:"EntityRequestContext",id:"entityrequestcontext",level:2},{value:"ERModelRelationshipEditablePropertiesUpdate",id:"ermodelrelationshipeditablepropertiesupdate",level:2},{value:"ERModelRelationshipPropertiesInput",id:"ermodelrelationshippropertiesinput",level:2},{value:"ERModelRelationshipUpdateInput",id:"ermodelrelationshipupdateinput",level:2},{value:"FacetFilterInput",id:"facetfilterinput",level:2},{value:"FilterInput",id:"filterinput",level:2},{value:"GetAccessTokenInput",id:"getaccesstokeninput",level:2},{value:"GetGrantedPrivilegesInput",id:"getgrantedprivilegesinput",level:2},{value:"GetInviteTokenInput",id:"getinvitetokeninput",level:2},{value:"GetQuickFiltersInput",id:"getquickfiltersinput",level:2},{value:"GetRootGlossaryEntitiesInput",id:"getrootglossaryentitiesinput",level:2},{value:"GetSchemaBlameInput",id:"getschemablameinput",level:2},{value:"GetSchemaVersionListInput",id:"getschemaversionlistinput",level:2},{value:"GetSecretValuesInput",id:"getsecretvaluesinput",level:2},{value:"GlobalTagsUpdate",id:"globaltagsupdate",level:2},{value:"GroupingCriterion",id:"groupingcriterion",level:2},{value:"GroupingSpec",id:"groupingspec",level:2},{value:"InstitutionalMemoryMetadataUpdate",id:"institutionalmemorymetadataupdate",level:2},{value:"InstitutionalMemoryUpdate",id:"institutionalmemoryupdate",level:2},{value:"LineageEdge",id:"lineageedge",level:2},{value:"LineageInput",id:"lineageinput",level:2},{value:"ListAccessTokenInput",id:"listaccesstokeninput",level:2},{value:"ListDomainsInput",id:"listdomainsinput",level:2},{value:"ListGlobalViewsInput",id:"listglobalviewsinput",level:2},{value:"ListGroupsInput",id:"listgroupsinput",level:2},{value:"ListIngestionSourcesInput",id:"listingestionsourcesinput",level:2},{value:"ListMyViewsInput",id:"listmyviewsinput",level:2},{value:"ListOwnershipTypesInput",id:"listownershiptypesinput",level:2},{value:"ListPoliciesInput",id:"listpoliciesinput",level:2},{value:"ListPostsInput",id:"listpostsinput",level:2},{value:"ListQueriesInput",id:"listqueriesinput",level:2},{value:"ListRecommendationsInput",id:"listrecommendationsinput",level:2},{value:"ListRolesInput",id:"listrolesinput",level:2},{value:"ListSecretsInput",id:"listsecretsinput",level:2},{value:"ListTestsInput",id:"listtestsinput",level:2},{value:"ListUsersInput",id:"listusersinput",level:2},{value:"MetadataAnalyticsInput",id:"metadataanalyticsinput",level:2},{value:"MoveDomainInput",id:"movedomaininput",level:2},{value:"NotebookEditablePropertiesUpdate",id:"notebookeditablepropertiesupdate",level:2},{value:"NotebookUpdateInput",id:"notebookupdateinput",level:2},{value:"OwnerInput",id:"ownerinput",level:2},{value:"OwnershipUpdate",id:"ownershipupdate",level:2},{value:"OwnerUpdate",id:"ownerupdate",level:2},{value:"PolicyMatchCriterionInput",id:"policymatchcriterioninput",level:2},{value:"PolicyMatchFilterInput",id:"policymatchfilterinput",level:2},{value:"PolicyUpdateInput",id:"policyupdateinput",level:2},{value:"PropertyValueInput",id:"propertyvalueinput",level:2},{value:"QueryStatementInput",id:"querystatementinput",level:2},{value:"RecommendationRequestContext",id:"recommendationrequestcontext",level:2},{value:"RelatedTermsInput",id:"relatedtermsinput",level:2},{value:"RelationshipFieldMappingInput",id:"relationshipfieldmappinginput",level:2},{value:"RelationshipsInput",id:"relationshipsinput",level:2},{value:"RemoveGroupMembersInput",id:"removegroupmembersinput",level:2},{value:"RemoveLinkInput",id:"removelinkinput",level:2},{value:"RemoveNativeGroupMembersInput",id:"removenativegroupmembersinput",level:2},{value:"RemoveOwnerInput",id:"removeownerinput",level:2},{value:"ReportOperationInput",id:"reportoperationinput",level:2},{value:"ResourceFilterInput",id:"resourcefilterinput",level:2},{value:"ResourceRefInput",id:"resourcerefinput",level:2},{value:"ResourceSpec",id:"resourcespec",level:2},{value:"RollbackIngestionInput",id:"rollbackingestioninput",level:2},{value:"ScrollAcrossEntitiesInput",id:"scrollacrossentitiesinput",level:2},{value:"ScrollAcrossLineageInput",id:"scrollacrosslineageinput",level:2},{value:"SearchAcrossEntitiesInput",id:"searchacrossentitiesinput",level:2},{value:"SearchAcrossLineageInput",id:"searchacrosslineageinput",level:2},{value:"SearchFlags",id:"searchflags",level:2},{value:"SearchInput",id:"searchinput",level:2},{value:"SearchRequestContext",id:"searchrequestcontext",level:2},{value:"SearchSortInput",id:"searchsortinput",level:2},{value:"SortCriterion",id:"sortcriterion",level:2},{value:"StepStateInput",id:"stepstateinput",level:2},{value:"StringMapEntryInput",id:"stringmapentryinput",level:2},{value:"StructuredPropertyInputParams",id:"structuredpropertyinputparams",level:2},{value:"SubmitFormPromptInput",id:"submitformpromptinput",level:2},{value:"TagAssociationInput",id:"tagassociationinput",level:2},{value:"TagAssociationUpdate",id:"tagassociationupdate",level:2},{value:"TagUpdateInput",id:"tagupdateinput",level:2},{value:"TermAssociationInput",id:"termassociationinput",level:2},{value:"TestDefinitionInput",id:"testdefinitioninput",level:2},{value:"UpdateCorpUserViewsSettingsInput",id:"updatecorpuserviewssettingsinput",level:2},{value:"UpdateDataProductInput",id:"updatedataproductinput",level:2},{value:"UpdateDeprecationInput",id:"updatedeprecationinput",level:2},{value:"UpdateEmbedInput",id:"updateembedinput",level:2},{value:"UpdateGlobalViewsSettingsInput",id:"updateglobalviewssettingsinput",level:2},{value:"UpdateIngestionSourceConfigInput",id:"updateingestionsourceconfiginput",level:2},{value:"UpdateIngestionSourceInput",id:"updateingestionsourceinput",level:2},{value:"UpdateIngestionSourceScheduleInput",id:"updateingestionsourcescheduleinput",level:2},{value:"UpdateLineageInput",id:"updatelineageinput",level:2},{value:"UpdateMediaInput",id:"updatemediainput",level:2},{value:"UpdateNameInput",id:"updatenameinput",level:2},{value:"UpdateOwnershipTypeInput",id:"updateownershiptypeinput",level:2},{value:"UpdateParentNodeInput",id:"updateparentnodeinput",level:2},{value:"UpdatePostContentInput",id:"updatepostcontentinput",level:2},{value:"UpdatePostInput",id:"updatepostinput",level:2},{value:"UpdateQueryInput",id:"updatequeryinput",level:2},{value:"UpdateQueryPropertiesInput",id:"updatequerypropertiesinput",level:2},{value:"UpdateQuerySubjectInput",id:"updatequerysubjectinput",level:2},{value:"UpdateSecretInput",id:"updatesecretinput",level:2},{value:"UpdateTestInput",id:"updatetestinput",level:2},{value:"UpdateUserSettingInput",id:"updateusersettinginput",level:2},{value:"UpdateViewInput",id:"updateviewinput",level:2},{value:"UpsertStructuredPropertiesInput",id:"upsertstructuredpropertiesinput",level:2},{value:"VerifyFormInput",id:"verifyforminput",level:2}],p={toc:d},c="wrapper";function h(t){var{components:l}=t,e=a(t,["components"]);return(0,n.kt)(c,u(function(t){for(var l=1;l<arguments.length;l++){var e=null!=arguments[l]?arguments[l]:{},n=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(e).filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})))),n.forEach((function(l){r(t,l,e[l])}))}return t}({},p,e),{components:l,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"acceptroleinput"},"AcceptRoleInput"),(0,n.kt)("p",null,"Input provided when accepting a DataHub role using an invite token"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"inviteToken",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The token needed to accept the role"))))),(0,n.kt)("h2",{id:"actorfilterinput"},"ActorFilterInput"),(0,n.kt)("p",null,"Input required when creating or updating an Access Policies Determines which actors the Policy applies to"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"users",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A disjunctive set of users to apply the policy to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"groups",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A disjunctive set of groups to apply the policy to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceOwners",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether the filter should return TRUE for owners of a particular resource Only applies to policies of type METADATA, which have a resource associated with them"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceOwnersTypes",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Set of OwnershipTypes to apply the policy to (if resourceOwners field is set to True)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"allUsers",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether the filter should apply to all users"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"allGroups",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether the filter should apply to all groups"))))),(0,n.kt)("h2",{id:"addgroupmembersinput"},"AddGroupMembersInput"),(0,n.kt)("p",null,"Input required to add members to an external DataHub group"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"groupUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The group to add members to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"userUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The members to add to the group"))))),(0,n.kt)("h2",{id:"addlinkinput"},"AddLinkInput"),(0,n.kt)("p",null,"Input provided when adding the association between a Metadata Entity and a Link"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"linkUrl",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The url of the link to add or remove"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"label",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A label to attach to the link"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the resource or entity to attach the link to, for example a dataset urn"))))),(0,n.kt)("h2",{id:"addnativegroupmembersinput"},"AddNativeGroupMembersInput"),(0,n.kt)("p",null,"Input required to add members to a native DataHub group"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"groupUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The group to add members to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"userUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The members to add to the group"))))),(0,n.kt)("h2",{id:"addownerinput"},"AddOwnerInput"),(0,n.kt)("p",null,"Input provided when adding the association between a Metadata Entity and an user or group owner"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownerUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Owner to add or remove"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownerEntityType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#ownerentitytype"},(0,n.kt)("code",null,"OwnerEntityType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The owner type, either a user or group"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#ownershiptype"},(0,n.kt)("code",null,"OwnershipType"))),(0,n.kt)("td",null,(0,n.kt)("blockquote",null,"Deprecated: No longer supported"),(0,n.kt)("p",null,"The ownership type for the new owner. If none is provided, then a new NONE will be added. Deprecated - Use ownershipTypeUrn field instead."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownershipTypeUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the ownership type entity."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the resource or entity to attach or remove the owner from, for example a dataset urn"))))),(0,n.kt)("h2",{id:"addownersinput"},"AddOwnersInput"),(0,n.kt)("p",null,"Input provided when adding multiple associations between a Metadata Entity and an user or group owner"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"owners",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ownerinput"},(0,n.kt)("code",null,"[OwnerInput!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Owner to add or remove"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the resource or entity to attach or remove the owner from, for example a dataset urn"))))),(0,n.kt)("h2",{id:"addtagsinput"},"AddTagsInput"),(0,n.kt)("p",null,"Input provided when adding tags to an asset"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"tagUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target Metadata Entity to add or remove the Tag to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResourceType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#subresourcetype"},(0,n.kt)("code",null,"SubResourceType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional type of a sub resource to attach the Tag to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResource",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional sub resource identifier to attach the Tag to"))))),(0,n.kt)("h2",{id:"addtermsinput"},"AddTermsInput"),(0,n.kt)("p",null,"Input provided when adding Terms to an asset"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"termUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Glossary Term to add or remove"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target Metadata Entity to add or remove the Glossary Term from"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResourceType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#subresourcetype"},(0,n.kt)("code",null,"SubResourceType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional type of a sub resource to attach the Glossary Term to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResource",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional sub resource identifier to attach the Glossary Term to"))))),(0,n.kt)("h2",{id:"aggregateacrossentitiesinput"},"AggregateAcrossEntitiesInput"),(0,n.kt)("p",null,"Input arguments for a full text search query across entities to get aggregations"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"types",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"[EntityType!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Entity types to be searched. If this is not provided, all entities will be searched."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The query string"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"facets",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The list of facets to get aggregations for. If list is empty or null, get aggregations for all facets Sub-aggregations can be specified with the unicode character \u241e (U+241E) as a delimiter between the subtypes. e.g. _entityType\u241eowners"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"viewUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - A View to apply when generating results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"searchFlags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#searchflags"},(0,n.kt)("code",null,"SearchFlags"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Flags controlling search options"))))),(0,n.kt)("h2",{id:"andfilterinput"},"AndFilterInput"),(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"and",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of and criteria the filter applies to the query"))))),(0,n.kt)("h2",{id:"aspectparams"},"AspectParams"),(0,n.kt)("p",null,"Params to configure what list of aspects should be fetched by the aspects property"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"autoRenderOnly",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Only fetch auto render aspects"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"aspectNames",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Fetch using aspect names If absent, returns all aspects matching other inputs"))))),(0,n.kt)("h2",{id:"autocompleteinput"},"AutoCompleteInput"),(0,n.kt)("p",null,"Input for performing an auto completion query against a single Metadata Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"EntityType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Entity type to be autocompleted against"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The raw query string"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"field",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional entity field name to autocomplete on"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"limit",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of autocomplete results to be returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Faceted filters applied to autocomplete results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))))),(0,n.kt)("h2",{id:"autocompletemultipleinput"},"AutoCompleteMultipleInput"),(0,n.kt)("p",null,"Input for performing an auto completion query against a a set of Metadata Entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"types",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"[EntityType!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Entity types to be autocompleted against Optional, if none supplied, all searchable types will be autocompleted against"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The raw query string"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"field",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional field to autocomplete against"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"limit",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of autocomplete results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Faceted filters applied to autocomplete results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"viewUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - A View to apply when generating results"))))),(0,n.kt)("h2",{id:"batchaddownersinput"},"BatchAddOwnersInput"),(0,n.kt)("p",null,"Input provided when adding owners to a batch of assets"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"owners",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ownerinput"},(0,n.kt)("code",null,"[OwnerInput!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the owners"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownershipTypeUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The ownership type to remove, optional. By default will remove regardless of ownership type."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#resourcerefinput"},(0,n.kt)("code",null,"[ResourceRefInput]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target assets to attach the owners to"))))),(0,n.kt)("h2",{id:"batchaddtagsinput"},"BatchAddTagsInput"),(0,n.kt)("p",null,"Input provided when adding tags to a batch of assets"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"tagUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#resourcerefinput"},(0,n.kt)("code",null,"[ResourceRefInput!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target assets to attach the tags to"))))),(0,n.kt)("h2",{id:"batchaddtermsinput"},"BatchAddTermsInput"),(0,n.kt)("p",null,"Input provided when adding glossary terms to a batch of assets"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"termUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Glossary Terms"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#resourcerefinput"},(0,n.kt)("code",null,"[ResourceRefInput]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target assets to attach the glossary terms to"))))),(0,n.kt)("h2",{id:"batchassignforminput"},"BatchAssignFormInput"),(0,n.kt)("p",null,"Input for batch assigning a form to different entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"formUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the form being assigned to entities"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"entityUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The entities that this form is being assigned to"))))),(0,n.kt)("h2",{id:"batchassignroleinput"},"BatchAssignRoleInput"),(0,n.kt)("p",null,"Input provided when batch assigning a role to a list of users"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"roleUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the role to assign to the actors. If undefined, will remove the role."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"actors",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urns of the actors to assign the role to"))))),(0,n.kt)("h2",{id:"batchdatasetupdateinput"},"BatchDatasetUpdateInput"),(0,n.kt)("p",null,"Arguments provided to batch update Dataset entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Primary key of the Dataset to which the update will be applied"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"update",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#datasetupdateinput"},(0,n.kt)("code",null,"DatasetUpdateInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Arguments provided to update the Dataset"))))),(0,n.kt)("h2",{id:"batchgetstepstatesinput"},"BatchGetStepStatesInput"),(0,n.kt)("p",null,"Input arguments required for fetching step states"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ids",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The unique ids for the steps to retrieve"))))),(0,n.kt)("h2",{id:"batchremoveforminput"},"BatchRemoveFormInput"),(0,n.kt)("p",null,"Input for batch removing a form from different entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"formUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the form being removed from entities"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"entityUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The entities that this form is being removed from"))))),(0,n.kt)("h2",{id:"batchremoveownersinput"},"BatchRemoveOwnersInput"),(0,n.kt)("p",null,"Input provided when removing owners from a batch of assets"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownerUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the owners"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownershipTypeUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The ownership type to remove, optional. By default will remove regardless of ownership type."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#resourcerefinput"},(0,n.kt)("code",null,"[ResourceRefInput]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target assets to remove the owners from"))))),(0,n.kt)("h2",{id:"batchremovetagsinput"},"BatchRemoveTagsInput"),(0,n.kt)("p",null,"Input provided when removing tags from a batch of assets"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"tagUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#resourcerefinput"},(0,n.kt)("code",null,"[ResourceRefInput]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target assets to remove the tags from"))))),(0,n.kt)("h2",{id:"batchremovetermsinput"},"BatchRemoveTermsInput"),(0,n.kt)("p",null,"Input provided when removing glossary terms from a batch of assets"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"termUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Glossary Terms"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#resourcerefinput"},(0,n.kt)("code",null,"[ResourceRefInput]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target assets to remove the glossary terms from"))))),(0,n.kt)("h2",{id:"batchsetdataproductinput"},"BatchSetDataProductInput"),(0,n.kt)("p",null,"Input properties required for batch setting a DataProduct on other entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"dataProductUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the data product you are setting on a group of resources. If this is null, the Data Product will be unset for the given resources."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urns of the entities the given data product should be set on"))))),(0,n.kt)("h2",{id:"batchsetdomaininput"},"BatchSetDomainInput"),(0,n.kt)("p",null,"Input provided when adding tags to a batch of assets"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"domainUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Domain, or null if the domain will be unset"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#resourcerefinput"},(0,n.kt)("code",null,"[ResourceRefInput!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target assets to attach the Domain"))))),(0,n.kt)("h2",{id:"batchupdatedeprecationinput"},"BatchUpdateDeprecationInput"),(0,n.kt)("p",null,"Input provided when updating the deprecation status for a batch of assets."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"deprecated",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether the Entity is marked as deprecated."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"decommissionTime",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - The time user plan to decommission this entity"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"note",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - Additional information about the entity deprecation plan"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#resourcerefinput"},(0,n.kt)("code",null,"[ResourceRefInput]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target assets to attach the tags to"))))),(0,n.kt)("h2",{id:"batchupdatesoftdeletedinput"},"BatchUpdateSoftDeletedInput"),(0,n.kt)("p",null,"Input provided when updating the soft-deleted status for a batch of assets"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urns of the assets to soft delete"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"deleted",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether to mark the asset as soft-deleted (hidden)"))))),(0,n.kt)("h2",{id:"batchupdatestepstatesinput"},"BatchUpdateStepStatesInput"),(0,n.kt)("p",null,"Input arguments required for updating step states"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"states",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#stepstateinput"},(0,n.kt)("code",null,"[StepStateInput!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Set of step states. If the id does not exist, it will be created."))))),(0,n.kt)("h2",{id:"browseinput"},"BrowseInput"),(0,n.kt)("p",null,"Input required for browse queries"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"EntityType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The browse entity type"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"path",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The browse path"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting point of paginated results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of elements included in the results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("blockquote",null,"Deprecated: Use `orFilters`- they are more expressive"),(0,n.kt)("p",null,"Deprecated in favor of the more expressive orFilters field Facet filters to apply to search results. These will be 'AND'-ed together."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))))),(0,n.kt)("h2",{id:"browsepathsinput"},"BrowsePathsInput"),(0,n.kt)("p",null,"Inputs for fetching the browse paths for a Metadata Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"EntityType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The browse entity type"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The entity urn"))))),(0,n.kt)("h2",{id:"browsev2input"},"BrowseV2Input"),(0,n.kt)("p",null,"Input required for browse queries"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"EntityType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The browse entity type - deprecated use types instead"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"types",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"[EntityType!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The browse entity type - deprecated use types instead. If not provided, all types will be used."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"path",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The browse path V2 - a list with each entry being part of the browse path V2"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting point of paginated results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of elements included in the results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"viewUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - A View to apply when generating results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The search query string"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"searchFlags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#searchflags"},(0,n.kt)("code",null,"SearchFlags"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Flags controlling search options"))))),(0,n.kt)("h2",{id:"cancelingestionexecutionrequestinput"},"CancelIngestionExecutionRequestInput"),(0,n.kt)("p",null,"Input for cancelling an execution request input"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ingestionSourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the ingestion source"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"executionRequestUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the specific execution request to cancel"))))),(0,n.kt)("h2",{id:"charteditablepropertiesupdate"},"ChartEditablePropertiesUpdate"),(0,n.kt)("p",null,"Update to writable Chart fields"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Writable description aka documentation for a Chart"))))),(0,n.kt)("h2",{id:"chartupdateinput"},"ChartUpdateInput"),(0,n.kt)("p",null,"Arguments provided to update a Chart Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownership",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ownershipupdate"},(0,n.kt)("code",null,"OwnershipUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to ownership"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"globalTags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Deprecated, use tags field instead Update to global tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"tags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"editableProperties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#charteditablepropertiesupdate"},(0,n.kt)("code",null,"ChartEditablePropertiesUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to editable properties"))))),(0,n.kt)("h2",{id:"containerentitiesinput"},"ContainerEntitiesInput"),(0,n.kt)("p",null,"Input required to fetch the entities inside of a container."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional query filter for particular entities inside the container"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The offset of the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of entities to include in result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional Facet filters to apply to the result set"))))),(0,n.kt)("h2",{id:"corpgroupupdateinput"},"CorpGroupUpdateInput"),(0,n.kt)("p",null,"Arguments provided to update a CorpGroup Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"DataHub description of the group"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"slack",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Slack handle for the group"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"email",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Email address for the group"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"pictureLink",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A URL which points to a picture which user wants to set as a profile photo"))))),(0,n.kt)("h2",{id:"corpuserupdateinput"},"CorpUserUpdateInput"),(0,n.kt)("p",null,"Arguments provided to update a CorpUser Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"displayName",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Display name to show on DataHub"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"title",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Title to show on DataHub"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"aboutMe",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"About me section of the user"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"teams",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Teams that the user belongs to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"skills",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Skills that the user possesses"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"pictureLink",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A URL which points to a picture which user wants to set as a profile photo"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"slack",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The slack handle of the user"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"phone",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Phone number for the user"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"email",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Email address for the user"))))),(0,n.kt)("h2",{id:"createaccesstokeninput"},"CreateAccessTokenInput"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#accesstokentype"},(0,n.kt)("code",null,"AccessTokenType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of the Access Token."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"actorUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The actor associated with the Access Token."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"duration",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#accesstokenduration"},(0,n.kt)("code",null,"AccessTokenDuration!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The duration for which the Access Token is valid."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the token to be generated."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Description of the token if defined."))))),(0,n.kt)("h2",{id:"createdataproductinput"},"CreateDataProductInput"),(0,n.kt)("p",null,"Input required for creating a DataProduct."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"properties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#createdataproductpropertiesinput"},(0,n.kt)("code",null,"CreateDataProductPropertiesInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Properties about the Query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"domainUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Domain"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"id",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional id for the new data product"))))),(0,n.kt)("h2",{id:"createdataproductpropertiesinput"},"CreateDataProductPropertiesInput"),(0,n.kt)("p",null,"Input properties required for creating a DataProduct"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A display name for the DataProduct"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional description for the DataProduct"))))),(0,n.kt)("h2",{id:"createdomaininput"},"CreateDomainInput"),(0,n.kt)("p",null,"Input required to create a new Domain."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"id",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional! A custom id to use as the primary key identifier for the domain. If not provided, a random UUID will be generated as the id."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Display name for the Domain"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional description for the Domain"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"parentDomain",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional parent domain urn for the domain"))))),(0,n.kt)("h2",{id:"createdynamicformassignmentinput"},"CreateDynamicFormAssignmentInput"),(0,n.kt)("p",null,"Input for batch assigning a form to different entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"formUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the form being assigned to entities that match some criteria"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters). Entities that match this filter will have this form applied to them. Currently, we only support a set of fields to filter on and they are: (1) platform (2) subType (3) container (4) _entityType (5) domain"))))),(0,n.kt)("h2",{id:"createglossaryentityinput"},"CreateGlossaryEntityInput"),(0,n.kt)("p",null,"Input required to create a new Glossary Entity - a Node or a Term."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"id",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional! A custom id to use as the primary key identifier for the domain. If not provided, a random UUID will be generated as the id."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Display name for the Node or Term"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Description for the Node or Term"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"parentNode",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional parent node urn for the Glossary Node or Term"))))),(0,n.kt)("h2",{id:"creategroupinput"},"CreateGroupInput"),(0,n.kt)("p",null,"Input for creating a new group"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"id",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional! A custom id to use as the primary key identifier for the group. If not provided, a random UUID will be generated as the id."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The display name of the group"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The description of the group"))))),(0,n.kt)("h2",{id:"createingestionexecutionrequestinput"},"CreateIngestionExecutionRequestInput"),(0,n.kt)("p",null,"Input for creating an execution request input"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ingestionSourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the ingestion source to execute"))))),(0,n.kt)("h2",{id:"createinvitetokeninput"},"CreateInviteTokenInput"),(0,n.kt)("p",null,"Input provided when creating an invite token"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"roleUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the role to create the invite token for"))))),(0,n.kt)("h2",{id:"createnativeuserresettokeninput"},"CreateNativeUserResetTokenInput"),(0,n.kt)("p",null,"Input required to generate a password reset token for a native user."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"userUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the user to reset the password of"))))),(0,n.kt)("h2",{id:"createownershiptypeinput"},"CreateOwnershipTypeInput"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the Custom Ownership Type"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The description of the Custom Ownership Type"))))),(0,n.kt)("h2",{id:"createpostinput"},"CreatePostInput"),(0,n.kt)("p",null,"Input provided when creating a Post"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"postType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#posttype"},(0,n.kt)("code",null,"PostType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of post"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"content",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#updatepostcontentinput"},(0,n.kt)("code",null,"UpdatePostContentInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The content of the post"))))),(0,n.kt)("h2",{id:"createqueryinput"},"CreateQueryInput"),(0,n.kt)("p",null,"Input required for creating a Query. Requires the 'Edit Queries' privilege for all query subjects."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"properties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#createquerypropertiesinput"},(0,n.kt)("code",null,"CreateQueryPropertiesInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Properties about the Query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subjects",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#createquerysubjectinput"},(0,n.kt)("code",null,"[CreateQuerySubjectInput!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Subjects for the query"))))),(0,n.kt)("h2",{id:"createquerypropertiesinput"},"CreateQueryPropertiesInput"),(0,n.kt)("p",null,"Input properties required for creating a Query"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional display name for the Query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional description for the Query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"statement",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#querystatementinput"},(0,n.kt)("code",null,"QueryStatementInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The Query contents"))))),(0,n.kt)("h2",{id:"createquerysubjectinput"},"CreateQuerySubjectInput"),(0,n.kt)("p",null,"Input required for creating a Query. For now, only datasets are supported."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"datasetUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the dataset that is the subject of the query"))))),(0,n.kt)("h2",{id:"createsecretinput"},"CreateSecretInput"),(0,n.kt)("p",null,"Input arguments for creating a new Secret"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the secret for reference in ingestion recipes"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"value",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The value of the secret, to be encrypted and stored"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional description for the secret"))))),(0,n.kt)("h2",{id:"createtaginput"},"CreateTagInput"),(0,n.kt)("p",null,"Input required to create a new Tag"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"id",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional! A custom id to use as the primary key identifier for the Tag. If not provided, a random UUID will be generated as the id."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Display name for the Tag"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional description for the Tag"))))),(0,n.kt)("h2",{id:"createtestconnectionrequestinput"},"CreateTestConnectionRequestInput"),(0,n.kt)("p",null,"Input for creating a test connection request"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"recipe",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A JSON-encoded recipe"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"version",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Advanced: The version of the ingestion framework to use"))))),(0,n.kt)("h2",{id:"createtestinput"},"CreateTestInput"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"id",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Advanced: a custom id for the test."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the Test"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"category",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The category of the Test (user defined)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Description of the test"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"definition",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#testdefinitioninput"},(0,n.kt)("code",null,"TestDefinitionInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The test definition"))))),(0,n.kt)("h2",{id:"createviewinput"},"CreateViewInput"),(0,n.kt)("p",null,"Input provided when creating a DataHub View"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"viewType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#datahubviewtype"},(0,n.kt)("code",null,"DataHubViewType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of View"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the View"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional description of the View"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"definition",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#datahubviewdefinitioninput"},(0,n.kt)("code",null,"DataHubViewDefinitionInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The view definition itself"))))),(0,n.kt)("h2",{id:"dashboardeditablepropertiesupdate"},"DashboardEditablePropertiesUpdate"),(0,n.kt)("p",null,"Update to writable Dashboard fields"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Writable description aka documentation for a Dashboard"))))),(0,n.kt)("h2",{id:"dashboardupdateinput"},"DashboardUpdateInput"),(0,n.kt)("p",null,"Arguments provided to update a Dashboard Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownership",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ownershipupdate"},(0,n.kt)("code",null,"OwnershipUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to ownership"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"globalTags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Deprecated, use tags field instead Update to global tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"tags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"editableProperties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#dashboardeditablepropertiesupdate"},(0,n.kt)("code",null,"DashboardEditablePropertiesUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to editable properties"))))),(0,n.kt)("h2",{id:"datafloweditablepropertiesupdate"},"DataFlowEditablePropertiesUpdate"),(0,n.kt)("p",null,"Update to writable Data Flow fields"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Writable description aka documentation for a Data Flow"))))),(0,n.kt)("h2",{id:"dataflowupdateinput"},"DataFlowUpdateInput"),(0,n.kt)("p",null,"Arguments provided to update a Data Flow aka Pipeline Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownership",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ownershipupdate"},(0,n.kt)("code",null,"OwnershipUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to ownership"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"globalTags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Deprecated, use tags field instead Update to global tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"tags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"editableProperties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#datafloweditablepropertiesupdate"},(0,n.kt)("code",null,"DataFlowEditablePropertiesUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to editable properties"))))),(0,n.kt)("h2",{id:"datahubviewdefinitioninput"},"DataHubViewDefinitionInput"),(0,n.kt)("p",null,"Input required for creating a DataHub View Definition"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"entityTypes",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"[EntityType!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A set of entity types that the view applies for. If left empty, then ALL entities will be in scope."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filter",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#datahubviewfilterinput"},(0,n.kt)("code",null,"DataHubViewFilterInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A set of filters to apply."))))),(0,n.kt)("h2",{id:"datahubviewfilterinput"},"DataHubViewFilterInput"),(0,n.kt)("p",null,"Input required for creating a DataHub View Definition"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"operator",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#logicaloperator"},(0,n.kt)("code",null,"LogicalOperator!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The operator used to combine the filters."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A set of filters combined via an operator. If left empty, then no filters will be applied."))))),(0,n.kt)("h2",{id:"datajobeditablepropertiesupdate"},"DataJobEditablePropertiesUpdate"),(0,n.kt)("p",null,"Update to writable Data Job fields"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Writable description aka documentation for a Data Job"))))),(0,n.kt)("h2",{id:"datajobupdateinput"},"DataJobUpdateInput"),(0,n.kt)("p",null,"Arguments provided to update a Data Job aka Task Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownership",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ownershipupdate"},(0,n.kt)("code",null,"OwnershipUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to ownership"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"globalTags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Deprecated, use tags field instead Update to global tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"tags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"editableProperties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#datajobeditablepropertiesupdate"},(0,n.kt)("code",null,"DataJobEditablePropertiesUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to editable properties"))))),(0,n.kt)("h2",{id:"dataproductentitiesinput"},"DataProductEntitiesInput"),(0,n.kt)("p",null,"Input required to fetch the entities inside of a Data Product."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional query filter for particular entities inside the Data Product"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The offset of the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of entities to include in result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional Facet filters to apply to the result set"))))),(0,n.kt)("h2",{id:"datasetdeprecationupdate"},"DatasetDeprecationUpdate"),(0,n.kt)("p",null,"An update for the deprecation information for a Metadata Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"deprecated",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether the dataset is deprecated"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"decommissionTime",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The time user plan to decommission this dataset"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"note",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Additional information about the dataset deprecation plan"))))),(0,n.kt)("h2",{id:"dataseteditablepropertiesupdate"},"DatasetEditablePropertiesUpdate"),(0,n.kt)("p",null,"Update to writable Dataset fields"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Writable description aka documentation for a Dataset"))))),(0,n.kt)("h2",{id:"datasetfilterinput"},"DatasetFilterInput"),(0,n.kt)("p",null,"Input required to create or update a DatasetFilter"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#datasetfiltertype"},(0,n.kt)("code",null,"DatasetFilterType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Type of partition"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"sql",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The raw query if using a SQL FilterType"))))),(0,n.kt)("h2",{id:"datasetupdateinput"},"DatasetUpdateInput"),(0,n.kt)("p",null,"Arguments provided to update a Dataset Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownership",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ownershipupdate"},(0,n.kt)("code",null,"OwnershipUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to ownership"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"deprecation",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#datasetdeprecationupdate"},(0,n.kt)("code",null,"DatasetDeprecationUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to deprecation status"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"institutionalMemory",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#institutionalmemoryupdate"},(0,n.kt)("code",null,"InstitutionalMemoryUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to institutional memory, ie documentation"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"globalTags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Deprecated, use tags field instead Update to global tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"tags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"editableSchemaMetadata",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#editableschemametadataupdate"},(0,n.kt)("code",null,"EditableSchemaMetadataUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to editable schema metadata of the dataset"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"editableProperties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#dataseteditablepropertiesupdate"},(0,n.kt)("code",null,"DatasetEditablePropertiesUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to editable properties"))))),(0,n.kt)("h2",{id:"descriptionupdateinput"},"DescriptionUpdateInput"),(0,n.kt)("p",null,"Incubating. Updates the description of a resource. Currently supports DatasetField descriptions only"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The new description"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the resource to attach the description to, eg dataset urn"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResourceType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#subresourcetype"},(0,n.kt)("code",null,"SubResourceType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional sub resource type"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResource",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A sub resource identifier, eg dataset field path"))))),(0,n.kt)("h2",{id:"domainentitiesinput"},"DomainEntitiesInput"),(0,n.kt)("p",null,"Input required to fetch the entities inside of a Domain."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional query filter for particular entities inside the domain"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The offset of the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of entities to include in result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional Facet filters to apply to the result set"))))),(0,n.kt)("h2",{id:"editableschemafieldinfoupdate"},"EditableSchemaFieldInfoUpdate"),(0,n.kt)("p",null,"Update to writable schema field metadata"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"fieldPath",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Flattened name of a field identifying the field the editable info is applied to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Edited description of the field"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"globalTags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Tags associated with the field"))))),(0,n.kt)("h2",{id:"editableschemametadataupdate"},"EditableSchemaMetadataUpdate"),(0,n.kt)("p",null,"Update to editable schema metadata of the dataset"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"editableSchemaFieldInfo",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#editableschemafieldinfoupdate"},(0,n.kt)("code",null,"[EditableSchemaFieldInfoUpdate!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to writable schema field metadata"))))),(0,n.kt)("h2",{id:"entitycountinput"},"EntityCountInput"),(0,n.kt)("p",null,"Input for the get entity counts endpoint"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"types",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"[EntityType!]"))),(0,n.kt)("td",null)))),(0,n.kt)("h2",{id:"entityrequestcontext"},"EntityRequestContext"),(0,n.kt)("p",null,"Context that defines an entity page requesting recommendations"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"EntityType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Type of the enity being displayed"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the entity being displayed"))))),(0,n.kt)("h2",{id:"ermodelrelationshipeditablepropertiesupdate"},"ERModelRelationshipEditablePropertiesUpdate"),(0,n.kt)("p",null,"Update to writable Dataset fields"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Display name of the ERModelRelationship"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Writable description for ERModelRelationship"))))),(0,n.kt)("h2",{id:"ermodelrelationshippropertiesinput"},"ERModelRelationshipPropertiesInput"),(0,n.kt)("p",null,"Details about the ERModelRelationship"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Details about the ERModelRelationship"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"source",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Details about the ERModelRelationship"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"destination",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Details about the ERModelRelationship"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"relationshipFieldmappings",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#relationshipfieldmappinginput"},(0,n.kt)("code",null,"[RelationshipFieldMappingInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Details about the ERModelRelationship"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"created",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"optional flag about the ERModelRelationship is getting create"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"createdAt",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"optional field to prevent created time while the ERModelRelationship is getting update"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"createdBy",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"optional field to prevent create actor while the ERModelRelationship is getting update"))))),(0,n.kt)("h2",{id:"ermodelrelationshipupdateinput"},"ERModelRelationshipUpdateInput"),(0,n.kt)("p",null,"Input required to create/update a new ERModelRelationship"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"properties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ermodelrelationshippropertiesinput"},(0,n.kt)("code",null,"ERModelRelationshipPropertiesInput"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Details about the ERModelRelationship"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"editableProperties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ermodelrelationshipeditablepropertiesupdate"},(0,n.kt)("code",null,"ERModelRelationshipEditablePropertiesUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to editable properties"))))),(0,n.kt)("h2",{id:"facetfilterinput"},"FacetFilterInput"),(0,n.kt)("p",null,"Facet filters to apply to search results"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"field",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Name of field to filter by"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"value",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("blockquote",null,"Deprecated: Prefer `values` for single elements"),(0,n.kt)("p",null,"Value of the field to filter by. Deprecated in favor of ",(0,n.kt)("code",null,"values"),", which should accept a single element array for a value"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"values",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Values, one of which the intended field should match."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"negated",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"If the filter should or should not be matched"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"condition",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#filteroperator"},(0,n.kt)("code",null,"FilterOperator"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Condition for the values. How to If unset, assumed to be equality"))))),(0,n.kt)("h2",{id:"filterinput"},"FilterInput"),(0,n.kt)("p",null,"A set of filter criteria"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"and",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of conjunctive filters"))))),(0,n.kt)("h2",{id:"getaccesstokeninput"},"GetAccessTokenInput"),(0,n.kt)("p",null,"Input required to fetch a new Access Token."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#accesstokentype"},(0,n.kt)("code",null,"AccessTokenType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of the Access Token."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"actorUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The actor associated with the Access Token."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"duration",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#accesstokenduration"},(0,n.kt)("code",null,"AccessTokenDuration!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The duration for which the Access Token is valid."))))),(0,n.kt)("h2",{id:"getgrantedprivilegesinput"},"GetGrantedPrivilegesInput"),(0,n.kt)("p",null,"Input for getting granted privileges"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"actorUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the actor"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceSpec",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#resourcespec"},(0,n.kt)("code",null,"ResourceSpec"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Spec to identify resource. If empty, gets privileges granted to the actor"))))),(0,n.kt)("h2",{id:"getinvitetokeninput"},"GetInviteTokenInput"),(0,n.kt)("p",null,"Input provided when getting an invite token"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"roleUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the role to get the invite token for"))))),(0,n.kt)("h2",{id:"getquickfiltersinput"},"GetQuickFiltersInput"),(0,n.kt)("p",null,"Input for getting Quick Filters"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"viewUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - A View to apply when generating results"))))),(0,n.kt)("h2",{id:"getrootglossaryentitiesinput"},"GetRootGlossaryEntitiesInput"),(0,n.kt)("p",null,"Input required when getting Business Glossary entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of Glossary Entities in the returned result set"))))),(0,n.kt)("h2",{id:"getschemablameinput"},"GetSchemaBlameInput"),(0,n.kt)("p",null,"Input for getting schema changes computed at a specific version."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"datasetUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The dataset urn"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"version",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Changes after this version are not shown. If not provided, this is the latestVersion."))))),(0,n.kt)("h2",{id:"getschemaversionlistinput"},"GetSchemaVersionListInput"),(0,n.kt)("p",null,"Input for getting list of schema versions."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"datasetUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The dataset urn"))))),(0,n.kt)("h2",{id:"getsecretvaluesinput"},"GetSecretValuesInput"),(0,n.kt)("p",null,"Input arguments for retrieving the plaintext values of a set of secrets"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"secrets",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of secret names"))))),(0,n.kt)("h2",{id:"globaltagsupdate"},"GlobalTagsUpdate"),(0,n.kt)("p",null,"Deprecated, use addTag or removeTag mutation instead\nUpdate to the Tags associated with a Metadata Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"tags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#tagassociationupdate"},(0,n.kt)("code",null,"[TagAssociationUpdate!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The new set of tags"))))),(0,n.kt)("h2",{id:"groupingcriterion"},"GroupingCriterion"),(0,n.kt)("p",null,"A single grouping criterion for grouping search results"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"baseEntityType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"EntityType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The base entity type that needs to be grouped e.g. schemaField Omitting this field will result in all base entities being grouped into the groupingEntityType."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"groupingEntityType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"EntityType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of entity being grouped into e.g. dataset, domain, etc."))))),(0,n.kt)("h2",{id:"groupingspec"},"GroupingSpec"),(0,n.kt)("p",null,"A grouping specification for search results."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"groupingCriteria",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#groupingcriterion"},(0,n.kt)("code",null,"[GroupingCriterion!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of grouping criteria for grouping search results. There is no implied order in the grouping criteria."))))),(0,n.kt)("h2",{id:"institutionalmemorymetadataupdate"},"InstitutionalMemoryMetadataUpdate"),(0,n.kt)("p",null,"An institutional memory to add to a Metadata Entity\nTODO Add a USER or GROUP actor enum"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"url",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Link to a document or wiki page or another internal resource"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Description of the resource"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"author",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The corp user urn of the author of the metadata"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"createdAt",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The time at which this metadata was created"))))),(0,n.kt)("h2",{id:"institutionalmemoryupdate"},"InstitutionalMemoryUpdate"),(0,n.kt)("p",null,"An update for the institutional memory information for a Metadata Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"elements",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#institutionalmemorymetadataupdate"},(0,n.kt)("code",null,"[InstitutionalMemoryMetadataUpdate!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The individual references in the institutional memory"))))),(0,n.kt)("h2",{id:"lineageedge"},"LineageEdge"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"downstreamUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the source entity. This urn is downstream of the destinationUrn."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"upstreamUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the destination entity. This urn is upstream of the destinationUrn"))))),(0,n.kt)("h2",{id:"lineageinput"},"LineageInput"),(0,n.kt)("p",null,"Input for the list lineage property of an Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"direction",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#lineagedirection"},(0,n.kt)("code",null,"LineageDirection!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The direction of the relationship, either incoming or outgoing from the source entity"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of results to be returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"separateSiblings",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional flag to not merge siblings in the response. They are merged by default."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"startTimeMillis",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional starting time to filter on"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"endTimeMillis",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional ending time to filter on"))))),(0,n.kt)("h2",{id:"listaccesstokeninput"},"ListAccessTokenInput"),(0,n.kt)("p",null,"Input arguments for listing access tokens"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of results to be returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Facet filters to apply to search results"))))),(0,n.kt)("h2",{id:"listdomainsinput"},"ListDomainsInput"),(0,n.kt)("p",null,"Input required when listing DataHub Domains"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Domains to be returned in the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional search query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"parentDomain",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional parent domain"))))),(0,n.kt)("h2",{id:"listglobalviewsinput"},"ListGlobalViewsInput"),(0,n.kt)("p",null,"Input provided when listing DataHub Global Views"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Views to be returned in the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional search query"))))),(0,n.kt)("h2",{id:"listgroupsinput"},"ListGroupsInput"),(0,n.kt)("p",null,"Input required when listing DataHub Groups"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Policies to be returned in the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional search query"))))),(0,n.kt)("h2",{id:"listingestionsourcesinput"},"ListIngestionSourcesInput"),(0,n.kt)("p",null,"Input arguments for listing Ingestion Sources"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of results to be returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional search query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional Facet filters to apply to the result set"))))),(0,n.kt)("h2",{id:"listmyviewsinput"},"ListMyViewsInput"),(0,n.kt)("p",null,"Input provided when listing DataHub Views"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Views to be returned in the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional search query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"viewType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#datahubviewtype"},(0,n.kt)("code",null,"DataHubViewType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - List the type of View to filter for."))))),(0,n.kt)("h2",{id:"listownershiptypesinput"},"ListOwnershipTypesInput"),(0,n.kt)("p",null,"Input required for listing custom ownership types entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned, default is 0"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Custom Ownership Types to be returned in the result set, default is 20"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional search query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional Facet filters to apply to the result set"))))),(0,n.kt)("h2",{id:"listpoliciesinput"},"ListPoliciesInput"),(0,n.kt)("p",null,"Input required when listing DataHub Access Policies"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Policies to be returned in the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional search query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))))),(0,n.kt)("h2",{id:"listpostsinput"},"ListPostsInput"),(0,n.kt)("p",null,"Input provided when listing existing posts"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Roles to be returned in the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional search query"))))),(0,n.kt)("h2",{id:"listqueriesinput"},"ListQueriesInput"),(0,n.kt)("p",null,"Input required for listing query entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Queries to be returned in the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A raw search query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"source",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#querysource"},(0,n.kt)("code",null,"QuerySource"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional source for the query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"datasetUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional Urn for the parent dataset that the query is associated with."))))),(0,n.kt)("h2",{id:"listrecommendationsinput"},"ListRecommendationsInput"),(0,n.kt)("p",null,"Input arguments for fetching UI recommendations"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"userUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the actor requesting recommendations"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"requestContext",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#recommendationrequestcontext"},(0,n.kt)("code",null,"RecommendationRequestContext"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Context provider by the caller requesting recommendations"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"limit",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Max number of modules to return"))))),(0,n.kt)("h2",{id:"listrolesinput"},"ListRolesInput"),(0,n.kt)("p",null,"Input provided when listing existing roles"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Roles to be returned in the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional search query"))))),(0,n.kt)("h2",{id:"listsecretsinput"},"ListSecretsInput"),(0,n.kt)("p",null,"Input for listing DataHub Secrets"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of results to be returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional search query"))))),(0,n.kt)("h2",{id:"listtestsinput"},"ListTestsInput"),(0,n.kt)("p",null,"Input required when listing DataHub Tests"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Domains to be returned in the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional query string to match on"))))),(0,n.kt)("h2",{id:"listusersinput"},"ListUsersInput"),(0,n.kt)("p",null,"Input required when listing DataHub Users"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set returned"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of Policies to be returned in the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional search query"))))),(0,n.kt)("h2",{id:"metadataanalyticsinput"},"MetadataAnalyticsInput"),(0,n.kt)("p",null,"Input to fetch metadata analytics charts"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"entityType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"EntityType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Entity type to fetch analytics for (If empty, queries across all entities)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"domain",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the domain to fetch analytics for (If empty or GLOBAL, queries across all domains)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Search query to filter down result (If empty, does not apply any search query)"))))),(0,n.kt)("h2",{id:"movedomaininput"},"MoveDomainInput"),(0,n.kt)("p",null,"Input for updating the parent domain of a domain."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"parentDomain",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The new parent domain urn. If parentDomain is null, this will remove the parent from this entity"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the resource to update the parent domain for"))))),(0,n.kt)("h2",{id:"notebookeditablepropertiesupdate"},"NotebookEditablePropertiesUpdate"),(0,n.kt)("p",null,"Update to writable Notebook fields"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Writable description aka documentation for a Notebook"))))),(0,n.kt)("h2",{id:"notebookupdateinput"},"NotebookUpdateInput"),(0,n.kt)("p",null,"Arguments provided to update a Notebook Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownership",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ownershipupdate"},(0,n.kt)("code",null,"OwnershipUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to ownership"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"tags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#globaltagsupdate"},(0,n.kt)("code",null,"GlobalTagsUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to tags"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"editableProperties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#notebookeditablepropertiesupdate"},(0,n.kt)("code",null,"NotebookEditablePropertiesUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Update to editable properties"))))),(0,n.kt)("h2",{id:"ownerinput"},"OwnerInput"),(0,n.kt)("p",null,"Input provided when adding an owner to an asset"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownerUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Owner to add or remove"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownerEntityType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#ownerentitytype"},(0,n.kt)("code",null,"OwnerEntityType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The owner type, either a user or group"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#ownershiptype"},(0,n.kt)("code",null,"OwnershipType"))),(0,n.kt)("td",null,(0,n.kt)("blockquote",null,"Deprecated: No longer supported"),(0,n.kt)("p",null,"The ownership type for the new owner. If none is provided, then a new NONE will be added. Deprecated - Use ownershipTypeUrn field instead."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownershipTypeUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the ownership type entity."))))),(0,n.kt)("h2",{id:"ownershipupdate"},"OwnershipUpdate"),(0,n.kt)("p",null,"An update for the ownership information for a Metadata Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"owners",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ownerupdate"},(0,n.kt)("code",null,"[OwnerUpdate!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The updated list of owners"))))),(0,n.kt)("h2",{id:"ownerupdate"},"OwnerUpdate"),(0,n.kt)("p",null,"An owner to add to a Metadata Entity\nTODO Add a USER or GROUP actor enum"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"owner",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The owner URN, either a corpGroup or corpuser"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#ownershiptype"},(0,n.kt)("code",null,"OwnershipType"))),(0,n.kt)("td",null,(0,n.kt)("blockquote",null,"Deprecated: No longer supported"),(0,n.kt)("p",null,"The owner type. Deprecated - Use ownershipTypeUrn field instead."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownershipTypeUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the ownership type entity."))))),(0,n.kt)("h2",{id:"policymatchcriterioninput"},"PolicyMatchCriterionInput"),(0,n.kt)("p",null,"Criterion to define relationship between field and values"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"field",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the field that the criterion refers to e.g. entity_type, entity_urn, domain"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"values",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Values. Matches criterion if any one of the values matches condition (OR-relationship)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"condition",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#policymatchcondition"},(0,n.kt)("code",null,"PolicyMatchCondition!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the field that the criterion refers to"))))),(0,n.kt)("h2",{id:"policymatchfilterinput"},"PolicyMatchFilterInput"),(0,n.kt)("p",null,"Filter object that encodes a complex filter logic with OR + AND"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"criteria",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#policymatchcriterioninput"},(0,n.kt)("code",null,"[PolicyMatchCriterionInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"List of criteria to apply"))))),(0,n.kt)("h2",{id:"policyupdateinput"},"PolicyUpdateInput"),(0,n.kt)("p",null,"Input provided when creating or updating an Access Policy"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#policytype"},(0,n.kt)("code",null,"PolicyType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The Policy Type"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The Policy name"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"state",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#policystate"},(0,n.kt)("code",null,"PolicyState!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The Policy state"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A Policy description"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#resourcefilterinput"},(0,n.kt)("code",null,"ResourceFilterInput"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The set of resources that the Policy privileges apply to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"privileges",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The set of privileges that the Policy grants"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"actors",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#actorfilterinput"},(0,n.kt)("code",null,"ActorFilterInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The set of actors that the Policy privileges are granted to"))))),(0,n.kt)("h2",{id:"propertyvalueinput"},"PropertyValueInput"),(0,n.kt)("p",null,"Input for collecting structured property values to apply to entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"stringValue",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The string value for this structured property"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"numberValue",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#float"},(0,n.kt)("code",null,"Float"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number value for this structured property"))))),(0,n.kt)("h2",{id:"querystatementinput"},"QueryStatementInput"),(0,n.kt)("p",null,"Input required for creating a Query Statement"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"value",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The query text"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"language",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#querylanguage"},(0,n.kt)("code",null,"QueryLanguage!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The query language"))))),(0,n.kt)("h2",{id:"recommendationrequestcontext"},"RecommendationRequestContext"),(0,n.kt)("p",null,"Context that defines the page requesting recommendations\ni.e. for search pages, the query/filters. for entity pages, the entity urn and tab"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"scenario",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#scenariotype"},(0,n.kt)("code",null,"ScenarioType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Scenario in which the recommendations will be displayed"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"searchRequestContext",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#searchrequestcontext"},(0,n.kt)("code",null,"SearchRequestContext"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Additional context for defining the search page requesting recommendations"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"entityRequestContext",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#entityrequestcontext"},(0,n.kt)("code",null,"EntityRequestContext"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Additional context for defining the entity page requesting recommendations"))))),(0,n.kt)("h2",{id:"relatedtermsinput"},"RelatedTermsInput"),(0,n.kt)("p",null,"Input provided when adding Terms to an asset"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The Glossary Term urn to add or remove this relationship to/from"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"termUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Glossary Term to add or remove"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"relationshipType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#termrelationshiptype"},(0,n.kt)("code",null,"TermRelationshipType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of relationship we're adding or removing to/from for a Glossary Term"))))),(0,n.kt)("h2",{id:"relationshipfieldmappinginput"},"RelationshipFieldMappingInput"),(0,n.kt)("p",null,"Details about the ERModelRelationship"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"sourceField",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Details about the ERModelRelationship"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"destinationField",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Details about the ERModelRelationship"))))),(0,n.kt)("h2",{id:"relationshipsinput"},"RelationshipsInput"),(0,n.kt)("p",null,"Input for the list relationships field of an Entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"types",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The types of relationships to query, representing an OR"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"direction",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#relationshipdirection"},(0,n.kt)("code",null,"RelationshipDirection!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The direction of the relationship, either incoming or outgoing from the source entity"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting offset of the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of results to be returned"))))),(0,n.kt)("h2",{id:"removegroupmembersinput"},"RemoveGroupMembersInput"),(0,n.kt)("p",null,"Input required to remove members from an external DataHub group"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"groupUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The group to remove members from"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"userUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The members to remove from the group"))))),(0,n.kt)("h2",{id:"removelinkinput"},"RemoveLinkInput"),(0,n.kt)("p",null,"Input provided when removing the association between a Metadata Entity and a Link"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"linkUrl",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The url of the link to add or remove, which uniquely identifies the Link"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the resource or entity to attach the link to, for example a dataset urn"))))),(0,n.kt)("h2",{id:"removenativegroupmembersinput"},"RemoveNativeGroupMembersInput"),(0,n.kt)("p",null,"Input required to remove members from a native DataHub group"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"groupUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The group to remove members from"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"userUrns",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The members to remove from the group"))))),(0,n.kt)("h2",{id:"removeownerinput"},"RemoveOwnerInput"),(0,n.kt)("p",null,"Input provided when removing the association between a Metadata Entity and an user or group owner"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownerUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Owner to add or remove"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownershipTypeUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The ownership type to remove, optional. By default will remove regardless of ownership type."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the resource or entity to attach or remove the owner from, for example a dataset urn"))))),(0,n.kt)("h2",{id:"reportoperationinput"},"ReportOperationInput"),(0,n.kt)("p",null,"Input provided to report an asset operation"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the asset (e.g. dataset) to report the operation for"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"operationType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#operationtype"},(0,n.kt)("code",null,"OperationType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of operation that was performed. Required"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"customOperationType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A custom type of operation. Required if operation type is CUSTOM."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"sourceType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#operationsourcetype"},(0,n.kt)("code",null,"OperationSourceType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The source or reporter of the operation"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"customProperties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#stringmapentryinput"},(0,n.kt)("code",null,"[StringMapEntryInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of key-value parameters to include"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"partition",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional partition identifier"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"numAffectedRows",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional: The number of affected rows"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"timestampMillis",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional: Provide a timestamp associated with the operation. If not provided, one will be generated for you based on the current time."))))),(0,n.kt)("h2",{id:"resourcefilterinput"},"ResourceFilterInput"),(0,n.kt)("p",null,"Input required when creating or updating an Access Policies Determines which resources the Policy applies to"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of the resource the policy should apply to Not required because in the future we want to support filtering by type OR by domain"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"[String!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of specific resource urns to apply the filter to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"allResources",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether of not to apply the filter to all resources of the type"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filter",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#policymatchfilterinput"},(0,n.kt)("code",null,"PolicyMatchFilterInput"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether of not to apply the filter to all resources of the type"))))),(0,n.kt)("h2",{id:"resourcerefinput"},"ResourceRefInput"),(0,n.kt)("p",null,"Reference to a resource to apply an action to"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the resource being referenced"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResourceType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#subresourcetype"},(0,n.kt)("code",null,"SubResourceType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional type of a sub resource to attach the Tag to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResource",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional sub resource identifier to attach the Tag to"))))),(0,n.kt)("h2",{id:"resourcespec"},"ResourceSpec"),(0,n.kt)("p",null,"Spec to identify resource"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"EntityType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Resource type"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Resource urn"))))),(0,n.kt)("h2",{id:"rollbackingestioninput"},"RollbackIngestionInput"),(0,n.kt)("p",null,"Input for rolling back an ingestion execution"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"runId",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An ingestion run ID"))))),(0,n.kt)("h2",{id:"scrollacrossentitiesinput"},"ScrollAcrossEntitiesInput"),(0,n.kt)("p",null,"Input arguments for a full text search query across entities, specifying a starting pointer. Allows paging beyond 10k results"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"types",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"[EntityType!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Entity types to be searched. If this is not provided, all entities will be searched."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The query string"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"scrollId",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting point of paginated results, an opaque ID the backend understands as a pointer"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"keepAlive",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The amount of time to keep the point in time snapshot alive, takes a time unit based string ex: 5m or 30s"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of elements included in the results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"viewUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - A View to apply when generating results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"searchFlags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#searchflags"},(0,n.kt)("code",null,"SearchFlags"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Flags controlling search options"))))),(0,n.kt)("h2",{id:"scrollacrosslineageinput"},"ScrollAcrossLineageInput"),(0,n.kt)("p",null,"Input arguments for a search query over the results of a multi-hop graph query, uses scroll API"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the source node"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"direction",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#lineagedirection"},(0,n.kt)("code",null,"LineageDirection!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The direction of the relationship, either incoming or outgoing from the source entity"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"types",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"[EntityType!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Entity types to be searched. If this is not provided, all entities will be searched."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The query string"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"scrollId",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting point of paginated results, an opaque ID the backend understands as a pointer"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"keepAlive",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The amount of time to keep the point in time snapshot alive, takes a time unit based string ex: 5m or 30s"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of elements included in the results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"startTimeMillis",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional starting time to filter on"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"endTimeMillis",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional ending time to filter on"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"searchFlags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#searchflags"},(0,n.kt)("code",null,"SearchFlags"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Flags controlling search options"))))),(0,n.kt)("h2",{id:"searchacrossentitiesinput"},"SearchAcrossEntitiesInput"),(0,n.kt)("p",null,"Input arguments for a full text search query across entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"types",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"[EntityType!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Entity types to be searched. If this is not provided, all entities will be searched."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The query string"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting point of paginated results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of elements included in the results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("blockquote",null,"Deprecated: Use `orFilters`- they are more expressive"),(0,n.kt)("p",null,"Deprecated in favor of the more expressive orFilters field Facet filters to apply to search results. These will be 'AND'-ed together."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"viewUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - A View to apply when generating results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"searchFlags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#searchflags"},(0,n.kt)("code",null,"SearchFlags"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Flags controlling search options"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"sortInput",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#searchsortinput"},(0,n.kt)("code",null,"SearchSortInput"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - Information on how to sort this search result"))))),(0,n.kt)("h2",{id:"searchacrosslineageinput"},"SearchAcrossLineageInput"),(0,n.kt)("p",null,"Input arguments for a search query over the results of a multi-hop graph query"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Urn of the source node"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"direction",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#lineagedirection"},(0,n.kt)("code",null,"LineageDirection!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The direction of the relationship, either incoming or outgoing from the source entity"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"types",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"[EntityType!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Entity types to be searched. If this is not provided, all entities will be searched."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The query string"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The starting point of paginated results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of elements included in the results"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("blockquote",null,"Deprecated: Use `orFilters`- they are more expressive"),(0,n.kt)("p",null,"Deprecated in favor of the more expressive orFilters field Facet filters to apply to search results. These will be 'AND'-ed together."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"startTimeMillis",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional starting time to filter on"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"endTimeMillis",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional ending time to filter on"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"searchFlags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#searchflags"},(0,n.kt)("code",null,"SearchFlags"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Flags controlling search options"))))),(0,n.kt)("h2",{id:"searchflags"},"SearchFlags"),(0,n.kt)("p",null,"Set of flags to control search behavior"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"skipCache",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether to skip cache"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"maxAggValues",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The maximum number of values in an facet aggregation"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"fulltext",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Structured or unstructured fulltext query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"skipHighlighting",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether to skip highlighting"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"skipAggregates",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether to skip aggregates/facets"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"getSuggestions",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether to request for search suggestions on the _entityName virtualized field"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"groupingSpec",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#groupingspec"},(0,n.kt)("code",null,"GroupingSpec"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Additional grouping specifications to apply to the search results Grouping specifications will control how search results are grouped together in the response. This is currently being used to group schema fields (columns) as datasets, and in the future will be used to group other entities as well. Note: This is an experimental feature and is subject to change."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"includeSoftDeleted",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether to include soft deleted entities"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"includeRestricted",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether to include restricted entities"))))),(0,n.kt)("h2",{id:"searchinput"},"SearchInput"),(0,n.kt)("p",null,"Input arguments for a full text search query"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#entitytype"},(0,n.kt)("code",null,"EntityType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The Metadata Entity type to be searched against"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The raw query string"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"start",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The offset of the result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"count",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#int"},(0,n.kt)("code",null,"Int"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The number of entities to include in result set"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("blockquote",null,"Deprecated: Use `orFilters`- they are more expressive"),(0,n.kt)("p",null,"Deprecated in favor of the more expressive orFilters field Facet filters to apply to search results. These will be 'AND'-ed together."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"orFilters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#andfilterinput"},(0,n.kt)("code",null,"[AndFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A list of disjunctive criterion for the filter. (or operation to combine filters)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"searchFlags",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#searchflags"},(0,n.kt)("code",null,"SearchFlags"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Flags controlling search options"))))),(0,n.kt)("h2",{id:"searchrequestcontext"},"SearchRequestContext"),(0,n.kt)("p",null,"Context that defines a search page requesting recommendatinos"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"query",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Search query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"filters",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#facetfilterinput"},(0,n.kt)("code",null,"[FacetFilterInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Faceted filters applied to search results"))))),(0,n.kt)("h2",{id:"searchsortinput"},"SearchSortInput"),(0,n.kt)("p",null,"Input required in order to sort search results"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"sortCriterion",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#sortcriterion"},(0,n.kt)("code",null,"SortCriterion!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A criterion to sort search results on"))))),(0,n.kt)("h2",{id:"sortcriterion"},"SortCriterion"),(0,n.kt)("p",null,"A single sorting criterion for sorting search."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"field",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A field upon which we'll do sorting on."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"sortOrder",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#sortorder"},(0,n.kt)("code",null,"SortOrder!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The order in which we will be sorting"))))),(0,n.kt)("h2",{id:"stepstateinput"},"StepStateInput"),(0,n.kt)("p",null,"The input required to update the state of a step"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"id",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The globally unique id for the step"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"properties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#stringmapentryinput"},(0,n.kt)("code",null,"[StringMapEntryInput]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The new properties for the step"))))),(0,n.kt)("h2",{id:"stringmapentryinput"},"StringMapEntryInput"),(0,n.kt)("p",null,"String map entry input"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"key",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The key of the map entry"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"value",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The value fo the map entry"))))),(0,n.kt)("h2",{id:"structuredpropertyinputparams"},"StructuredPropertyInputParams"),(0,n.kt)("p",null,"A prompt shown to the user to collect metadata about an entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"structuredPropertyUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the structured property being applied to an entity"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"values",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#propertyvalueinput"},(0,n.kt)("code",null,"[PropertyValueInput!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The list of values you want to apply on this structured property to an entity"))))),(0,n.kt)("h2",{id:"submitformpromptinput"},"SubmitFormPromptInput"),(0,n.kt)("p",null,"Input for responding to a singular prompt in a form"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"promptId",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The unique ID of the prompt this input is responding to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"formUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the form that this prompt is a part of"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#formprompttype"},(0,n.kt)("code",null,"FormPromptType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of prompt that this input is responding to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"fieldPath",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The fieldPath on a schema field that this prompt submission is association with. This should be provided when the prompt is type FIELDS_STRUCTURED_PROPERTY"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"structuredPropertyParams",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#structuredpropertyinputparams"},(0,n.kt)("code",null,"StructuredPropertyInputParams"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The structured property required for the prompt on this entity"))))),(0,n.kt)("h2",{id:"tagassociationinput"},"TagAssociationInput"),(0,n.kt)("p",null,"Input provided when updating the association between a Metadata Entity and a Tag"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"tagUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Tag to add or remove"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target Metadata Entity to add or remove the Tag to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResourceType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#subresourcetype"},(0,n.kt)("code",null,"SubResourceType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional type of a sub resource to attach the Tag to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResource",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional sub resource identifier to attach the Tag to"))))),(0,n.kt)("h2",{id:"tagassociationupdate"},"TagAssociationUpdate"),(0,n.kt)("p",null,"Deprecated, use addTag or removeTag mutation instead\nA tag update to be applied"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"tag",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#tagupdateinput"},(0,n.kt)("code",null,"TagUpdateInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The tag being applied"))))),(0,n.kt)("h2",{id:"tagupdateinput"},"TagUpdateInput"),(0,n.kt)("p",null,"Deprecated, use addTag or removeTag mutations instead\nAn update for a particular Tag entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Tag"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The display name of a Tag"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Description of the tag"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"ownership",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#ownershipupdate"},(0,n.kt)("code",null,"OwnershipUpdate"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Ownership metadata of the tag"))))),(0,n.kt)("h2",{id:"termassociationinput"},"TermAssociationInput"),(0,n.kt)("p",null,"Input provided when updating the association between a Metadata Entity and a Glossary Term"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"termUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Glossary Term to add or remove"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The target Metadata Entity to add or remove the Glossary Term from"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResourceType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#subresourcetype"},(0,n.kt)("code",null,"SubResourceType"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional type of a sub resource to attach the Glossary Term to"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subResource",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional sub resource identifier to attach the Glossary Term to"))))),(0,n.kt)("h2",{id:"testdefinitioninput"},"TestDefinitionInput"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"json",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The string representation of the Test Deprecated! JSON representation is no longer supported."))))),(0,n.kt)("h2",{id:"updatecorpuserviewssettingsinput"},"UpdateCorpUserViewsSettingsInput"),(0,n.kt)("p",null,"Input required to update a users settings."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"defaultView",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The URN of the View that serves as this user's personal default. If not provided, any existing default view will be removed."))))),(0,n.kt)("h2",{id:"updatedataproductinput"},"UpdateDataProductInput"),(0,n.kt)("p",null,"Input properties required for update a DataProduct"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A display name for the DataProduct"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional description for the DataProduct"))))),(0,n.kt)("h2",{id:"updatedeprecationinput"},"UpdateDeprecationInput"),(0,n.kt)("p",null,"Input provided when setting the Deprecation status for an Entity."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the Entity to set deprecation for."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"deprecated",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether the Entity is marked as deprecated."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"decommissionTime",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#long"},(0,n.kt)("code",null,"Long"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - The time user plan to decommission this entity"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"note",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional - Additional information about the entity deprecation plan"))))),(0,n.kt)("h2",{id:"updateembedinput"},"UpdateEmbedInput"),(0,n.kt)("p",null,"Input required to set or clear information related to rendering a Data Asset inside of DataHub."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The URN associated with the Data Asset to update. Only dataset, dashboard, and chart urns are currently supported."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"renderUrl",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Set or clear a URL used to render an embedded asset."))))),(0,n.kt)("h2",{id:"updateglobalviewssettingsinput"},"UpdateGlobalViewsSettingsInput"),(0,n.kt)("p",null,"Input required to update Global View Settings."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"defaultView",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The URN of the View that serves as the Global, or organization-wide, default. If this field is not provided, the existing Global Default will be cleared."))))),(0,n.kt)("h2",{id:"updateingestionsourceconfiginput"},"UpdateIngestionSourceConfigInput"),(0,n.kt)("p",null,"Input parameters for creating / updating an Ingestion Source"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"recipe",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A JSON-encoded recipe"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"version",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The version of DataHub Ingestion Framework to use when executing the recipe."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"executorId",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The id of the executor to use for executing the recipe"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"debugMode",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Whether or not to run ingestion in debug mode"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"extraArgs",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#stringmapentryinput"},(0,n.kt)("code",null,"[StringMapEntryInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Extra arguments for the ingestion run."))))),(0,n.kt)("h2",{id:"updateingestionsourceinput"},"UpdateIngestionSourceInput"),(0,n.kt)("p",null,"Input arguments for creating / updating an Ingestion Source"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A name associated with the ingestion source"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of the source itself, e.g. mysql, bigquery, bigquery-usage. Should match the recipe."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional description associated with the ingestion source"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"schedule",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#updateingestionsourcescheduleinput"},(0,n.kt)("code",null,"UpdateIngestionSourceScheduleInput"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional schedule for the ingestion source. If not provided, the source is only available for run on-demand."))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"config",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#updateingestionsourceconfiginput"},(0,n.kt)("code",null,"UpdateIngestionSourceConfigInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"A set of type-specific ingestion source configurations"))))),(0,n.kt)("h2",{id:"updateingestionsourcescheduleinput"},"UpdateIngestionSourceScheduleInput"),(0,n.kt)("p",null,"Input arguments for creating / updating the schedule of an Ingestion Source"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"interval",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The cron-formatted interval describing when the job should be executed"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"timezone",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the timezone in which the cron interval should be scheduled (e.g. America/Los Angeles)"))))),(0,n.kt)("h2",{id:"updatelineageinput"},"UpdateLineageInput"),(0,n.kt)("p",null,"Input required in order to upsert lineage edges"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"edgesToAdd",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#lineageedge"},(0,n.kt)("code",null,"[LineageEdge]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"New lineage edges to upsert"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"edgesToRemove",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#lineageedge"},(0,n.kt)("code",null,"[LineageEdge]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Lineage edges to remove. Takes precedence over edgesToAdd - so edges existing both edgesToAdd and edgesToRemove will be removed."))))),(0,n.kt)("h2",{id:"updatemediainput"},"UpdateMediaInput"),(0,n.kt)("p",null,"Input provided for filling in a post content"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"type",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#mediatype"},(0,n.kt)("code",null,"MediaType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of media"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"location",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The location of the media (a URL)"))))),(0,n.kt)("h2",{id:"updatenameinput"},"UpdateNameInput"),(0,n.kt)("p",null,"Input for updating the name of an entity"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The new name"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the resource to update the name for"))))),(0,n.kt)("h2",{id:"updateownershiptypeinput"},"UpdateOwnershipTypeInput"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the Custom Ownership Type"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The description of the Custom Ownership Type"))))),(0,n.kt)("h2",{id:"updateparentnodeinput"},"UpdateParentNodeInput"),(0,n.kt)("p",null,"Input for updating the parent node of a resource. Currently only GlossaryNodes and GlossaryTerms have parentNodes."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"parentNode",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The new parent node urn. If parentNode is null, this will remove the parent from this entity"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"resourceUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the resource to update the parent node for"))))),(0,n.kt)("h2",{id:"updatepostcontentinput"},"UpdatePostContentInput"),(0,n.kt)("p",null,"Input provided for filling in a post content"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"contentType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#postcontenttype"},(0,n.kt)("code",null,"PostContentType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of post content"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"title",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The title of the post"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional content of the post"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"link",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional link that the post is associated with"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"media",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#updatemediainput"},(0,n.kt)("code",null,"UpdateMediaInput"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Optional media contained in the post"))))),(0,n.kt)("h2",{id:"updatepostinput"},"UpdatePostInput"),(0,n.kt)("p",null,"Input provided when creating a Post"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the post to edit or update"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"postType",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#posttype"},(0,n.kt)("code",null,"PostType!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The type of post"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"content",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#updatepostcontentinput"},(0,n.kt)("code",null,"UpdatePostContentInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The content of the post"))))),(0,n.kt)("h2",{id:"updatequeryinput"},"UpdateQueryInput"),(0,n.kt)("p",null,"Input required for updating an existing Query. Requires the 'Edit Queries' privilege for all query subjects."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"properties",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#updatequerypropertiesinput"},(0,n.kt)("code",null,"UpdateQueryPropertiesInput"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Properties about the Query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"subjects",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#updatequerysubjectinput"},(0,n.kt)("code",null,"[UpdateQuerySubjectInput!]"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Subjects for the query"))))),(0,n.kt)("h2",{id:"updatequerypropertiesinput"},"UpdateQueryPropertiesInput"),(0,n.kt)("p",null,"Input properties required for creating a Query. Any non-null fields will be updated if provided."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional display name for the Query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional description for the Query"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"statement",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#querystatementinput"},(0,n.kt)("code",null,"QueryStatementInput"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The Query contents"))))),(0,n.kt)("h2",{id:"updatequerysubjectinput"},"UpdateQuerySubjectInput"),(0,n.kt)("p",null,"Input required for creating a Query. For now, only datasets are supported."),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"datasetUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the dataset that is the subject of the query"))))),(0,n.kt)("h2",{id:"updatesecretinput"},"UpdateSecretInput"),(0,n.kt)("p",null,"Input arguments for updating a Secret"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"urn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The primary key of the Secret to update"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the secret for reference in ingestion recipes"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"value",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The value of the secret, to be encrypted and stored"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional description for the secret"))))),(0,n.kt)("h2",{id:"updatetestinput"},"UpdateTestInput"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the Test"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"category",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The category of the Test (user defined)"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"Description of the test"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"definition",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#testdefinitioninput"},(0,n.kt)("code",null,"TestDefinitionInput!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The test definition"))))),(0,n.kt)("h2",{id:"updateusersettinginput"},"UpdateUserSettingInput"),(0,n.kt)("p",null,"Input for updating a user setting"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/enums#usersetting"},(0,n.kt)("code",null,"UserSetting!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the setting"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"value",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#boolean"},(0,n.kt)("code",null,"Boolean!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The new value of the setting"))))),(0,n.kt)("h2",{id:"updateviewinput"},"UpdateViewInput"),(0,n.kt)("p",null,"Input provided when updating a DataHub View"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"name",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The name of the View"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"description",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"An optional description of the View"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"definition",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#datahubviewdefinitioninput"},(0,n.kt)("code",null,"DataHubViewDefinitionInput"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The view definition itself"))))),(0,n.kt)("h2",{id:"upsertstructuredpropertiesinput"},"UpsertStructuredPropertiesInput"),(0,n.kt)("p",null,"Input for upserting structured properties on a given asset"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"assetUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the asset that we are updating"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"structuredPropertyInputParams",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/inputObjects#structuredpropertyinputparams"},(0,n.kt)("code",null,"[StructuredPropertyInputParams!]!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The list of structured properties you want to upsert on this asset"))))),(0,n.kt)("h2",{id:"verifyforminput"},"VerifyFormInput"),(0,n.kt)("p",null,"Input for verifying forms on entities"),(0,n.kt)("p",{style:{marginBottom:"0.4em"}},(0,n.kt)("strong",null,"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Name"),(0,n.kt)("th",null,"Description"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"formUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the form being verified on an entity"))),(0,n.kt)("tr",null,(0,n.kt)("td",null,"entityUrn",(0,n.kt)("br",null),(0,n.kt)("a",{href:"/docs/graphql/scalars#string"},(0,n.kt)("code",null,"String!"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The urn of the entity that is having a form verified on it"))))))}h.isMDXComponent=!0}}]);