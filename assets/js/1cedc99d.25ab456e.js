"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[16474],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),m=i,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return a?n.createElement(g,l(l({ref:t},u),{},{components:a})):n.createElement(g,l({ref:t},u))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},18679:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),i=a(86010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,l),hidden:a},t)}},34259:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(83117),i=a(67294),r=a(86010),l=a(51048),o=a(33609),s=a(1943),p=a(72957);const u="tabList__CuJ",d="tabItem_LNqP";function c(e){const{lazy:t,block:a,defaultValue:l,values:c,groupId:m,className:g}=e,f=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=c??f.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,o.l)(h,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===l?l:l??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==k&&!h.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,s.U)(),[v,w]=(0,i.useState)(k),C=[],{blockElementScrollPositionUntilNextRender:E}=(0,p.o5)();if(null!=m){const e=y[m];null!=e&&e!==v&&h.some((t=>t.value===e))&&w(e)}const T=e=>{const t=e.currentTarget,a=C.indexOf(t),n=h[a].value;n!==v&&(E(t),w(n),null!=m&&N(m,String(n)))},O=e=>{let t=null;switch(e.key){case"Enter":T(e);break;case"ArrowRight":{const a=C.indexOf(e.currentTarget)+1;t=C[a]??C[0];break}case"ArrowLeft":{const a=C.indexOf(e.currentTarget)-1;t=C[a]??C[C.length-1];break}}t?.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",u)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},g)},h.map((e=>{let{value:t,label:a,attributes:l}=e;return i.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>C.push(e),onKeyDown:O,onClick:T},l,{className:(0,r.Z)("tabs__item",d,l?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,i.cloneElement)(f.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function m(e){const t=(0,l.Z)();return i.createElement(c,(0,n.Z)({key:String(t)},e))}},44234:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var n=a(83117),i=(a(67294),a(3905)),r=a(34259),l=a(18679);const o={sidebar_position:16,title:"File Based Lineage",slug:"/generated/ingestion/sources/file-based-lineage",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/file-based-lineage.md"},s="File Based Lineage",p={unversionedId:"docs/generated/ingestion/sources/file-based-lineage",id:"docs/generated/ingestion/sources/file-based-lineage",title:"File Based Lineage",description:"Certified",source:"@site/genDocs/docs/generated/ingestion/sources/file-based-lineage.md",sourceDirName:"docs/generated/ingestion/sources",slug:"/generated/ingestion/sources/file-based-lineage",permalink:"/docs/next/generated/ingestion/sources/file-based-lineage",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/file-based-lineage.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16,title:"File Based Lineage",slug:"/generated/ingestion/sources/file-based-lineage",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/file-based-lineage.md"},sidebar:"overviewSidebar",previous:{title:"File",permalink:"/docs/next/generated/ingestion/sources/file"},next:{title:"Glue",permalink:"/docs/next/generated/ingestion/sources/glue"}},u={},d=[{value:"CLI based Ingestion",id:"cli-based-ingestion",level:3},{value:"Install the Plugin",id:"install-the-plugin",level:4},{value:"Starter Recipe",id:"starter-recipe",level:3},{value:"Config Details",id:"config-details",level:3},{value:"Lineage File Format",id:"lineage-file-format",level:3},{value:"Code Coordinates",id:"code-coordinates",level:3}],c={toc:d};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"file-based-lineage"},"File Based Lineage"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/support%20status-certified-brightgreen",alt:"Certified"})),(0,i.kt)("p",null,"This plugin pulls lineage metadata from a yaml-formatted file. An example of one such file is located in the examples directory ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/bootstrap_data/file_lineage.yml"},"here"),"."),(0,i.kt)("h3",{id:"cli-based-ingestion"},"CLI based Ingestion"),(0,i.kt)("h4",{id:"install-the-plugin"},"Install the Plugin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"pip install 'acryl-datahub[datahub-lineage-file]'\n")),(0,i.kt)("h3",{id:"starter-recipe"},"Starter Recipe"),(0,i.kt)("p",null,"Check out the following recipe to get started with ingestion! See ",(0,i.kt)("a",{parentName:"p",href:"#config-details"},"below")," for full configuration options."),(0,i.kt)("p",null,"For general pointers on writing and running a recipe, see our ",(0,i.kt)("a",{parentName:"p",href:"/docs/next/metadata-ingestion#recipes"},"main recipe guide"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"source:\n  type: datahub-lineage-file\n  config:\n    # Coordinates\n    file: /path/to/file_lineage.yml\n    # Whether we want to query datahub-gms for upstream data\n    preserve_upstream: False\n\nsink:\n# sink configs\n")),(0,i.kt)("h3",{id:"config-details"},"Config Details"),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"options",label:"Options",default:!0,mdxType:"TabItem"},(0,i.kt)("p",null,"Note that a ",(0,i.kt)("inlineCode",{parentName:"p"},".")," is used to denote nested fields in the YAML recipe."),(0,i.kt)("div",{className:"config-table"},(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("div",{className:"path-line"},(0,i.kt)("span",{className:"path-main"},"file"),"\xa0",(0,i.kt)("abbr",{title:"Required"},"\u2705"))," ",(0,i.kt)("div",{className:"type-name-line"},(0,i.kt)("span",{className:"type-name"},"string"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"File path or URL to lineage file to ingest.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("div",{className:"path-line"},(0,i.kt)("span",{className:"path-main"},"preserve_upstream"))," ",(0,i.kt)("div",{className:"type-name-line"},(0,i.kt)("span",{className:"type-name"},"boolean"))),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether we want to query datahub-gms for upstream data. False means it will hard replace upstream data for a given entity. True means it will query the backend for existing upstreams and include it in the ingestion run ",(0,i.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,i.kt)("span",{className:"default-value"},"True")))))))),(0,i.kt)(l.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSONSchema")," for this configuration is inlined below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "title": "LineageFileSourceConfig",\n  "type": "object",\n  "properties": {\n    "file": {\n      "title": "File",\n      "description": "File path or URL to lineage file to ingest.",\n      "type": "string"\n    },\n    "preserve_upstream": {\n      "title": "Preserve Upstream",\n      "description": "Whether we want to query datahub-gms for upstream data. False means it will hard replace upstream data for a given entity. True means it will query the backend for existing upstreams and include it in the ingestion run",\n      "default": true,\n      "type": "boolean"\n    }\n  },\n  "required": [\n    "file"\n  ],\n  "additionalProperties": false\n}\n')))),(0,i.kt)("h3",{id:"lineage-file-format"},"Lineage File Format"),(0,i.kt)("p",null,"The lineage source file should be a ",(0,i.kt)("inlineCode",{parentName:"p"},".yml")," file with the following top-level keys:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"version"),": the version of lineage file config the config conforms to. Currently, the only version released\nis ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"lineage"),": the top level key of the lineage file containing a list of ",(0,i.kt)("strong",{parentName:"p"},"EntityNodeConfig")," objects"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"EntityNodeConfig"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"entity"),": ",(0,i.kt)("strong",{parentName:"li"},"EntityConfig")," object"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"upstream"),": (optional) list of child ",(0,i.kt)("strong",{parentName:"li"},"EntityNodeConfig")," objects"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"fineGrainedLineages"),": (optional) list of ",(0,i.kt)("strong",{parentName:"li"},"FineGrainedLineageConfig")," objects")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"EntityConfig"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"name"),": identifier of the entity. Typically name or guid, as used in constructing entity urn."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"type"),": type of the entity (only ",(0,i.kt)("inlineCode",{parentName:"li"},"dataset")," is supported as of now)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"env"),": the environment of this entity. Should match the values in the\ntable ",(0,i.kt)("a",{parentName:"li",href:"/docs/graphql/enums/#fabrictype"},"here")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"platform"),": a valid platform like kafka, snowflake, etc.."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"platform_instance"),": optional string specifying the platform instance of this entity")),(0,i.kt)("p",null,"For example if dataset URN is ",(0,i.kt)("inlineCode",{parentName:"p"},"urn:li:dataset:(urn:li:dataPlatform:redshift,userdb.public.customer_table,DEV)")," then ",(0,i.kt)("strong",{parentName:"p"},"EntityConfig")," will look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"name : userdb.public.customer_table\ntype: dataset\nenv: DEV\nplatform: redshift\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"FineGrainedLineageConfig"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"upstreamType"),': type of upstream entity in a fine-grained lineage; default = "FIELD_SET"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"upstreams"),": (optional) list of upstream schema field urns"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"downstreamType"),': type of downstream entity in a fine-grained lineage; default = "FIELD_SET"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"downstreams"),": (optional) list of downstream schema field urns"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"transformOperation"),": (optional) transform operation applied to the upstream entities to produce the downstream field(s)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"confidenceScore"),": (optional) the confidence in this lineage between 0 (low confidence) and 1 (high confidence); default = 1.0")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"FineGrainedLineageConfig")," can be used to display fine grained lineage, also referred to as column-level lineage,\nfor custom sources."),(0,i.kt)("p",null,"You can also view an example lineage file checked in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/examples/bootstrap_data/file_lineage.yml"},"here")),(0,i.kt)("h3",{id:"code-coordinates"},"Code Coordinates"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Class Name: ",(0,i.kt)("inlineCode",{parentName:"li"},"datahub.ingestion.source.metadata.lineage.LineageFileSource")),(0,i.kt)("li",{parentName:"ul"},"Browse on ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/source/metadata/lineage.py"},"GitHub"))),(0,i.kt)("h2",null,"Questions"),(0,i.kt)("p",null,"If you've got any questions on configuring ingestion for File Based Lineage, feel free to ping us on ",(0,i.kt)("a",{parentName:"p",href:"https://slack.datahubproject.io"},"our Slack"),"."))}m.isMDXComponent=!0}}]);