"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[19092],{29840:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>k,frontMatter:()=>d,metadata:()=>m,toc:()=>u});a(67294);var n=a(3905),i=a(51715),s=a(7626);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}const d={sidebar_position:9,title:"dbt",slug:"/generated/ingestion/sources/dbt",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/dbt.md"},p="dbt",m={unversionedId:"docs/generated/ingestion/sources/dbt",id:"docs/generated/ingestion/sources/dbt",title:"dbt",description:"There are 2 sources that provide integration with dbt",source:"@site/genDocs/docs/generated/ingestion/sources/dbt.md",sourceDirName:"docs/generated/ingestion/sources",slug:"/generated/ingestion/sources/dbt",permalink:"/docs/next/generated/ingestion/sources/dbt",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/dbt.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"dbt",slug:"/generated/ingestion/sources/dbt",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/dbt.md"},sidebar:"overviewSidebar",previous:{title:"DataHub",permalink:"/docs/next/generated/ingestion/sources/datahub"},next:{title:"Delta Lake",permalink:"/docs/next/generated/ingestion/sources/delta-lake"}},c={},u=[{value:"Concept Mapping",id:"concept-mapping",level:3},{value:"Module <code>dbt</code>",id:"module-dbt",level:2},{value:"Important Capabilities",id:"important-capabilities",level:3},{value:"CLI based Ingestion",id:"cli-based-ingestion",level:3},{value:"Install the Plugin",id:"install-the-plugin",level:4},{value:"Starter Recipe",id:"starter-recipe",level:3},{value:"Config Details",id:"config-details",level:3},{value:"dbt meta automated mappings",id:"dbt-meta-automated-mappings",level:3},{value:"Data Tier - Bronze, Silver, Gold",id:"data-tier---bronze-silver-gold",level:4},{value:"Case Numbers - create tags",id:"case-numbers---create-tags",level:4},{value:"Stripping out leading @ sign",id:"stripping-out-leading--sign",level:4},{value:"dbt query_tag automated mappings",id:"dbt-query_tag-automated-mappings",level:3},{value:"Integrating with dbt test",id:"integrating-with-dbt-test",level:3},{value:"View of dbt tests for a dataset",id:"view-of-dbt-tests-for-a-dataset",level:4},{value:"Viewing the SQL for a dbt test",id:"viewing-the-sql-for-a-dbt-test",level:4},{value:"Viewing timeline for a failed dbt test",id:"viewing-timeline-for-a-failed-dbt-test",level:4},{value:"Separating test result emission from other metadata emission",id:"separating-test-result-emission-from-other-metadata-emission",level:4},{value:"Code Coordinates",id:"code-coordinates",level:3},{value:"Module <code>dbt-cloud</code>",id:"module-dbt-cloud",level:2},{value:"Important Capabilities",id:"important-capabilities-1",level:3},{value:"CLI based Ingestion",id:"cli-based-ingestion-1",level:3},{value:"Install the Plugin",id:"install-the-plugin-1",level:4},{value:"Starter Recipe",id:"starter-recipe-1",level:3},{value:"Config Details",id:"config-details-1",level:3},{value:"Code Coordinates",id:"code-coordinates-1",level:3}],f={toc:u},h="wrapper";function k(e){var{components:t}=e,a=o(e,["components"]);return(0,n.kt)(h,r(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){l(e,t,a[t])}))}return e}({},f,a),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"dbt"},"dbt"),(0,n.kt)("p",null,"There are 2 sources that provide integration with dbt"),(0,n.kt)("table",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,"Source Module"),(0,n.kt)("td",null,"Documentation")),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"dbt"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"The artifacts used by this source are:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/manifest-json"},"dbt manifest file"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This file contains model, source, tests and lineage data."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/catalog-json"},"dbt catalog file"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This file contains schema data."),(0,n.kt)("li",{parentName:"ul"},"dbt does not record schema data for Ephemeral models, as such datahub will show Ephemeral models in the lineage, however there will be no associated schema for Ephemeral models"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/sources-json"},"dbt sources file"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This file contains metadata for sources with freshness checks."),(0,n.kt)("li",{parentName:"ul"},"We transfer dbt's freshness checks to DataHub's last-modified fields."),(0,n.kt)("li",{parentName:"ul"},"Note that this file is optional \u2013 if not specified, we'll use time of ingestion instead as a proxy for time last-modified."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/run-results-json"},"dbt run_results file"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This file contains metadata from the result of a dbt run, e.g. dbt test"),(0,n.kt)("li",{parentName:"ul"},"When provided, we transfer dbt test run results into assertion run events to see a timeline of test runs on the dataset\n",(0,n.kt)("a",{parentName:"li",href:"#module-dbt"},"Read more..."))))))),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"dbt-cloud"))),(0,n.kt)("td",null,(0,n.kt)("p",null,"This source pulls dbt metadata directly from the dbt Cloud APIs."),(0,n.kt)("p",null,'You\'ll need to have a dbt Cloud job set up to run your dbt project, and "Generate docs on run" should be enabled.'),(0,n.kt)("p",null,'The token should have the "read metadata" permission.'),(0,n.kt)("p",null,'To get the required IDs, go to the job details page (this is the one with the "Run History" table), and look at the URL.\nIt should look something like this: ',(0,n.kt)("a",{parentName:"p",href:"https://cloud.getdbt.com/next/deploy/107298/projects/175705/jobs/148094"},"https://cloud.getdbt.com/next/deploy/107298/projects/175705/jobs/148094"),".\nIn this example, the account ID is 107298, the project ID is 175705, and the job ID is 148094.\n",(0,n.kt)("a",{parentName:"p",href:"#module-dbt-cloud"},"Read more..."))))),(0,n.kt)("p",null,"Ingesting metadata from dbt requires either using the ",(0,n.kt)("strong",{parentName:"p"},"dbt")," module or the ",(0,n.kt)("strong",{parentName:"p"},"dbt-cloud")," module."),(0,n.kt)("h3",{id:"concept-mapping"},"Concept Mapping"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Source Concept"),(0,n.kt)("th",{parentName:"tr",align:null},"DataHub Concept"),(0,n.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},'"dbt"')),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/next/generated/metamodel/entities/dataplatform"},"Data Platform")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"dbt Source"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/next/generated/metamodel/entities/dataset"},"Dataset")),(0,n.kt)("td",{parentName:"tr",align:null},"Subtype ",(0,n.kt)("inlineCode",{parentName:"td"},"source"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"dbt Seed"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/next/generated/metamodel/entities/dataset"},"Dataset")),(0,n.kt)("td",{parentName:"tr",align:null},"Subtype ",(0,n.kt)("inlineCode",{parentName:"td"},"seed"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"dbt Model"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/next/generated/metamodel/entities/dataset"},"Dataset")),(0,n.kt)("td",{parentName:"tr",align:null},"Subtype ",(0,n.kt)("inlineCode",{parentName:"td"},"model"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"dbt Snapshot"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/next/generated/metamodel/entities/dataset"},"Dataset")),(0,n.kt)("td",{parentName:"tr",align:null},"Subtype ",(0,n.kt)("inlineCode",{parentName:"td"},"snapshot"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"dbt Test"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/next/generated/metamodel/entities/assertion"},"Assertion")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"dbt Test Result"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/next/generated/metamodel/entities/assertion"},"Assertion Run Result")),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("p",null,"Note:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"It also generates lineage between the ",(0,n.kt)("inlineCode",{parentName:"li"},"dbt")," nodes (e.g. ephemeral nodes that depend on other dbt sources) as well as lineage between the ",(0,n.kt)("inlineCode",{parentName:"li"},"dbt")," nodes and the underlying (target) platform nodes (e.g. BigQuery Table -> dbt Source, dbt View -> BigQuery View)."),(0,n.kt)("li",{parentName:"ol"},"We also support automated actions (like add a tag, term or owner) based on properties defined in dbt meta.")),(0,n.kt)("h2",{id:"module-dbt"},"Module ",(0,n.kt)("inlineCode",{parentName:"h2"},"dbt")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/support%20status-certified-brightgreen",alt:"Certified"})),(0,n.kt)("h3",{id:"important-capabilities"},"Important Capabilities"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Capability"),(0,n.kt)("th",{parentName:"tr",align:null},"Status"),(0,n.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Column-level Lineage"),(0,n.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,n.kt)("td",{parentName:"tr",align:null},"Enabled by default, configure using ",(0,n.kt)("inlineCode",{parentName:"td"},"include_column_lineage"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/next/metadata-ingestion/docs/dev_guides/stateful#stale-entity-removal"},"Detect Deleted Entities")),(0,n.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,n.kt)("td",{parentName:"tr",align:null},"Enabled via stateful ingestion")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Table-Level Lineage"),(0,n.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,n.kt)("td",{parentName:"tr",align:null},"Enabled by default")))),(0,n.kt)("p",null,"The artifacts used by this source are:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/manifest-json"},"dbt manifest file"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This file contains model, source, tests and lineage data."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/catalog-json"},"dbt catalog file"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This file contains schema data."),(0,n.kt)("li",{parentName:"ul"},"dbt does not record schema data for Ephemeral models, as such datahub will show Ephemeral models in the lineage, however there will be no associated schema for Ephemeral models"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/sources-json"},"dbt sources file"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This file contains metadata for sources with freshness checks."),(0,n.kt)("li",{parentName:"ul"},"We transfer dbt's freshness checks to DataHub's last-modified fields."),(0,n.kt)("li",{parentName:"ul"},"Note that this file is optional \u2013 if not specified, we'll use time of ingestion instead as a proxy for time last-modified."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.getdbt.com/reference/artifacts/run-results-json"},"dbt run_results file"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"This file contains metadata from the result of a dbt run, e.g. dbt test"),(0,n.kt)("li",{parentName:"ul"},"When provided, we transfer dbt test run results into assertion run events to see a timeline of test runs on the dataset")))),(0,n.kt)("h3",{id:"cli-based-ingestion"},"CLI based Ingestion"),(0,n.kt)("h4",{id:"install-the-plugin"},"Install the Plugin"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"pip install 'acryl-datahub[dbt]'\n")),(0,n.kt)("h3",{id:"starter-recipe"},"Starter Recipe"),(0,n.kt)("p",null,"Check out the following recipe to get started with ingestion! See ",(0,n.kt)("a",{parentName:"p",href:"#config-details"},"below")," for full configuration options."),(0,n.kt)("p",null,"For general pointers on writing and running a recipe, see our ",(0,n.kt)("a",{parentName:"p",href:"/docs/next/metadata-ingestion#recipes"},"main recipe guide"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: "dbt"\n  config:\n    # Coordinates\n    # To use this as-is, set the environment variable DBT_PROJECT_ROOT to the root folder of your dbt project\n    manifest_path: "${DBT_PROJECT_ROOT}/target/manifest_file.json"\n    catalog_path: "${DBT_PROJECT_ROOT}/target/catalog_file.json"\n    sources_path: "${DBT_PROJECT_ROOT}/target/sources_file.json" # optional for freshness\n    test_results_path: "${DBT_PROJECT_ROOT}/target/run_results.json" # optional for recording dbt test results after running dbt test\n\n    # Options\n    target_platform: "my_target_platform_id" # e.g. bigquery/postgres/etc.\n\n# sink configs\n\n')),(0,n.kt)("h3",{id:"config-details"},"Config Details"),(0,n.kt)(i.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"options",label:"Options",default:!0,mdxType:"TabItem"},(0,n.kt)("p",null,"Note that a ",(0,n.kt)("inlineCode",{parentName:"p"},".")," is used to denote nested fields in the YAML recipe."),(0,n.kt)("div",{className:"config-table"},(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"catalog_path"),"\xa0",(0,n.kt)("abbr",{title:"Required"},"\u2705"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Path to dbt catalog JSON. See ",(0,n.kt)("a",{parentName:"td",href:"https://docs.getdbt.com/reference/artifacts/catalog-json"},"https://docs.getdbt.com/reference/artifacts/catalog-json")," Note this can be a local file or a URI.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"manifest_path"),"\xa0",(0,n.kt)("abbr",{title:"Required"},"\u2705"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Path to dbt manifest JSON. See ",(0,n.kt)("a",{parentName:"td",href:"https://docs.getdbt.com/reference/artifacts/manifest-json"},"https://docs.getdbt.com/reference/artifacts/manifest-json")," Note this can be a local file or a URI.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"target_platform"),"\xa0",(0,n.kt)("abbr",{title:"Required"},"\u2705"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The platform that dbt is loading onto. (e.g. bigquery / redshift / postgres etc.)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"column_meta_mapping"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"object"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"mapping rules that will be executed against dbt column meta properties. Refer to the section below on dbt meta automated mappings. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"{","}")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"convert_column_urns_to_lowercase"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, converts column URNs to lowercase to ensure cross-platform compatibility. If ",(0,n.kt)("inlineCode",{parentName:"td"},"target_platform")," is Snowflake, the default is True. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"enable_meta_mapping"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, applies the mappings that are defined through the meta_mapping directives. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"enable_owner_extraction"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, ownership info will be extracted from the dbt meta ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"enable_query_tag_mapping"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, applies the mappings that are defined through the ",(0,n.kt)("inlineCode",{parentName:"td"},"query_tag_mapping")," directives. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"include_column_lineage"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, column-level lineage will be extracted from the dbt node definition. Requires ",(0,n.kt)("inlineCode",{parentName:"td"},"infer_dbt_schemas")," to be enabled. If you run into issues where the column name casing does not match up with properly, providing a datahub_api or using the rest sink will improve accuracy. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"include_env_in_assertion_guid"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Prior to version 0.9.4.2, the assertion GUIDs did not include the environment. If you're using multiple dbt ingestion that are only distinguished by env, then you should set this flag to True. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"incremental_lineage"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, emits incremental/patch lineage for non-dbt entities. When disabled, re-states lineage on each run. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"infer_dbt_schemas"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, schemas will be inferred from the dbt node definition. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"meta_mapping"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"object"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"mapping rules that will be executed against dbt meta properties. Refer to the section below on dbt meta automated mappings. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"{","}")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"owner_extraction_pattern"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Regex string to extract owner from the dbt node using the ",(0,n.kt)("inlineCode",{parentName:"td"},"(?P<name>...) syntax")," of the ",(0,n.kt)("a",{parentName:"td",href:"https://docs.python.org/3/library/re.html#match-objects"},"match object"),", where the group name must be ",(0,n.kt)("inlineCode",{parentName:"td"},"owner"),". Examples: (1)",(0,n.kt)("inlineCode",{parentName:"td"},'r"(?P<owner>(.*)): (\\w+) (\\w+)"')," will extract ",(0,n.kt)("inlineCode",{parentName:"td"},"jdoe")," as the owner from ",(0,n.kt)("inlineCode",{parentName:"td"},'"jdoe: John Doe"')," (2) ",(0,n.kt)("inlineCode",{parentName:"td"},'r"@(?P<owner>(.*))"')," will extract ",(0,n.kt)("inlineCode",{parentName:"td"},"alice")," as the owner from ",(0,n.kt)("inlineCode",{parentName:"td"},'"@alice"'),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"platform_instance"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The instance of the platform that all assets produced by this recipe belong to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"query_tag_mapping"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"object"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"mapping rules that will be executed against dbt query_tag meta properties. Refer to the section below on dbt meta automated mappings. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"{","}")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"sources_path"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Path to dbt sources JSON. See ",(0,n.kt)("a",{parentName:"td",href:"https://docs.getdbt.com/reference/artifacts/sources-json"},"https://docs.getdbt.com/reference/artifacts/sources-json"),". If not specified, last-modified fields will not be populated. Note this can be a local file or a URI.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"strip_user_ids_from_email"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Whether or not to strip email id while adding owners using dbt meta actions. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"tag_prefix"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Prefix added to tags during ingestion. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"dbt:")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"target_platform_instance"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The platform instance for the platform that dbt is operating on. Use this if you have multiple instances of the same platform (e.g. redshift) and need to distinguish between them.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"test_results_path"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Path to output of dbt test run as run_results file in JSON format. See ",(0,n.kt)("a",{parentName:"td",href:"https://docs.getdbt.com/reference/artifacts/run-results-json"},"https://docs.getdbt.com/reference/artifacts/run-results-json"),". If not specified, test execution results will not be populated in DataHub.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"test_warnings_are_errors"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, dbt test warnings will be treated as failures. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"use_compiled_code"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, uses the compiled dbt code instead of the raw dbt node definition. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"use_identifiers"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Use model identifier instead of model name if defined (if not, default to model name). ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"write_semantics"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},'Whether the new tags, terms and owners to be added will override the existing ones added only by this source or not. Value for this config can be "PATCH" or "OVERRIDE" ',(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"PATCH")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"env"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Environment to use in namespace when constructing URNs. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"PROD")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"aws_connection"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"AwsConnectionConfig"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When fetching manifest files from s3, configuration for aws connection details")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection."),(0,n.kt)("span",{className:"path-main"},"aws_access_key_id"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"AWS access key ID. Can be auto-detected, see ",(0,n.kt)("a",{parentName:"td",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html"},"the AWS boto3 docs")," for details.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection."),(0,n.kt)("span",{className:"path-main"},"aws_advanced_config"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"object"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Advanced AWS configuration options. These are passed directly to ",(0,n.kt)("a",{parentName:"td",href:"https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html"},"botocore.config.Config"),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection."),(0,n.kt)("span",{className:"path-main"},"aws_endpoint_url"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The AWS service endpoint. This is normally ",(0,n.kt)("a",{parentName:"td",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html"},"constructed automatically"),", but can be overridden here.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection."),(0,n.kt)("span",{className:"path-main"},"aws_profile"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Named AWS profile to use. Only used if access key / secret are unset. If not set the default will be used")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection."),(0,n.kt)("span",{className:"path-main"},"aws_proxy"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"map(str,string)"))),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection."),(0,n.kt)("span",{className:"path-main"},"aws_region"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"AWS region code.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection."),(0,n.kt)("span",{className:"path-main"},"aws_secret_access_key"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"AWS secret access key. Can be auto-detected, see ",(0,n.kt)("a",{parentName:"td",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html"},"the AWS boto3 docs")," for details.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection."),(0,n.kt)("span",{className:"path-main"},"aws_session_token"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"AWS session token. Can be auto-detected, see ",(0,n.kt)("a",{parentName:"td",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html"},"the AWS boto3 docs")," for details.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection."),(0,n.kt)("span",{className:"path-main"},"read_timeout"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"number"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The timeout for reading from the connection (in seconds). ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"60")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection."),(0,n.kt)("span",{className:"path-main"},"aws_role"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"One of string, array"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are documented at ",(0,n.kt)("a",{parentName:"td",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role"},"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection.aws_role."),(0,n.kt)("span",{className:"path-main"},"union"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"One of string, AwsAssumeRoleConfig"))),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection.aws_role.union."),(0,n.kt)("span",{className:"path-main"},"RoleArn"),"\xa0",(0,n.kt)("abbr",{title:"Required if union is set"},"\u2753"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"ARN of the role to assume.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"aws_connection.aws_role.union."),(0,n.kt)("span",{className:"path-main"},"ExternalId"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"External ID to use when assuming the role.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"entities_enabled"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"DBTEntitiesEnabled"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Controls for enabling / disabling metadata emission for different dbt entities (models, test definitions, test results, etc.) ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"{","'","models","'",": ","'","YES","'",", ","'","sources","'",": ","'","YES","'",", ","'","seeds","'",": ","'","YES","'","...")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"models"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for dbt models when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"seeds"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for dbt seeds when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"snapshots"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for dbt snapshots when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"sources"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for dbt sources when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"test_definitions"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for test definitions when enabled when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"test_results"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for test results when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"git_info"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"GitReference"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Reference to your git location to enable easy navigation from DataHub to your dbt files.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"git_info."),(0,n.kt)("span",{className:"path-main"},"repo"),"\xa0",(0,n.kt)("abbr",{title:"Required if git_info is set"},"\u2753"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Name of your Git repo e.g. ",(0,n.kt)("a",{parentName:"td",href:"https://github.com/datahub-project/datahub"},"https://github.com/datahub-project/datahub")," or ",(0,n.kt)("a",{parentName:"td",href:"https://gitlab.com/gitlab-org/gitlab"},"https://gitlab.com/gitlab-org/gitlab"),". If organization/repo is provided, we assume it is a GitHub repo.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"git_info."),(0,n.kt)("span",{className:"path-main"},"branch"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Branch on which your files live by default. Typically main or master. This can also be a commit hash. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"main")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"git_info."),(0,n.kt)("span",{className:"path-main"},"url_template"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Template for generating a URL to a file in the repo e.g. '{repo_url}/blob/{branch}/{file_path}'. We can infer this for GitHub and GitLab repos, and it is otherwise required.It supports the following variables: {repo_url}, {branch}, {file_path}")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"node_name_pattern"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"AllowDenyPattern"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"regex patterns for dbt model names to filter in ingestion. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"{","'","allow","'",": ","[","'",".","*","'","]",", ","'","deny","'",": ","[","]",", ","'","ignoreCase","'",": True","}")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"node_name_pattern."),(0,n.kt)("span",{className:"path-main"},"ignoreCase"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Whether to ignore case sensitivity during pattern matching. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"node_name_pattern."),(0,n.kt)("span",{className:"path-main"},"allow"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"array"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"List of regex patterns to include in ingestion ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"[","'",".","*","'","]")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"node_name_pattern.allow."),(0,n.kt)("span",{className:"path-main"},"string"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"node_name_pattern."),(0,n.kt)("span",{className:"path-main"},"deny"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"array"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"List of regex patterns to exclude from ingestion. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"[","]")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"node_name_pattern.deny."),(0,n.kt)("span",{className:"path-main"},"string"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"stateful_ingestion"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"StatefulStaleMetadataRemovalConfig"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"DBT Stateful Ingestion Config.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"stateful_ingestion."),(0,n.kt)("span",{className:"path-main"},"enabled"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Whether or not to enable stateful ingest. Default: True if datahub-rest sink is used or if a ",(0,n.kt)("inlineCode",{parentName:"td"},"datahub_api")," is specified, otherwise False ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"stateful_ingestion."),(0,n.kt)("span",{className:"path-main"},"remove_stale_metadata"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))))))),(0,n.kt)(s.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSONSchema")," for this configuration is inlined below."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "title": "DBTCoreConfig",\n  "description": "Base configuration class for stateful ingestion for source configs to inherit from.",\n  "type": "object",\n  "properties": {\n    "incremental_lineage": {\n      "title": "Incremental Lineage",\n      "description": "When enabled, emits incremental/patch lineage for non-dbt entities. When disabled, re-states lineage on each run.",\n      "default": true,\n      "type": "boolean"\n    },\n    "env": {\n      "title": "Env",\n      "description": "Environment to use in namespace when constructing URNs.",\n      "default": "PROD",\n      "type": "string"\n    },\n    "platform_instance": {\n      "title": "Platform Instance",\n      "description": "The instance of the platform that all assets produced by this recipe belong to",\n      "type": "string"\n    },\n    "stateful_ingestion": {\n      "title": "Stateful Ingestion",\n      "description": "DBT Stateful Ingestion Config.",\n      "allOf": [\n        {\n          "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"\n        }\n      ]\n    },\n    "target_platform": {\n      "title": "Target Platform",\n      "description": "The platform that dbt is loading onto. (e.g. bigquery / redshift / postgres etc.)",\n      "type": "string"\n    },\n    "target_platform_instance": {\n      "title": "Target Platform Instance",\n      "description": "The platform instance for the platform that dbt is operating on. Use this if you have multiple instances of the same platform (e.g. redshift) and need to distinguish between them.",\n      "type": "string"\n    },\n    "use_identifiers": {\n      "title": "Use Identifiers",\n      "description": "Use model identifier instead of model name if defined (if not, default to model name).",\n      "default": false,\n      "type": "boolean"\n    },\n    "entities_enabled": {\n      "title": "Entities Enabled",\n      "description": "Controls for enabling / disabling metadata emission for different dbt entities (models, test definitions, test results, etc.)",\n      "default": {\n        "models": "YES",\n        "sources": "YES",\n        "seeds": "YES",\n        "snapshots": "YES",\n        "test_definitions": "YES",\n        "test_results": "YES"\n      },\n      "allOf": [\n        {\n          "$ref": "#/definitions/DBTEntitiesEnabled"\n        }\n      ]\n    },\n    "tag_prefix": {\n      "title": "Tag Prefix",\n      "description": "Prefix added to tags during ingestion.",\n      "default": "dbt:",\n      "type": "string"\n    },\n    "node_name_pattern": {\n      "title": "Node Name Pattern",\n      "description": "regex patterns for dbt model names to filter in ingestion.",\n      "default": {\n        "allow": [\n          ".*"\n        ],\n        "deny": [],\n        "ignoreCase": true\n      },\n      "allOf": [\n        {\n          "$ref": "#/definitions/AllowDenyPattern"\n        }\n      ]\n    },\n    "meta_mapping": {\n      "title": "Meta Mapping",\n      "description": "mapping rules that will be executed against dbt meta properties. Refer to the section below on dbt meta automated mappings.",\n      "default": {},\n      "type": "object"\n    },\n    "column_meta_mapping": {\n      "title": "Column Meta Mapping",\n      "description": "mapping rules that will be executed against dbt column meta properties. Refer to the section below on dbt meta automated mappings.",\n      "default": {},\n      "type": "object"\n    },\n    "enable_meta_mapping": {\n      "title": "Enable Meta Mapping",\n      "description": "When enabled, applies the mappings that are defined through the meta_mapping directives.",\n      "default": true,\n      "type": "boolean"\n    },\n    "query_tag_mapping": {\n      "title": "Query Tag Mapping",\n      "description": "mapping rules that will be executed against dbt query_tag meta properties. Refer to the section below on dbt meta automated mappings.",\n      "default": {},\n      "type": "object"\n    },\n    "enable_query_tag_mapping": {\n      "title": "Enable Query Tag Mapping",\n      "description": "When enabled, applies the mappings that are defined through the `query_tag_mapping` directives.",\n      "default": true,\n      "type": "boolean"\n    },\n    "write_semantics": {\n      "title": "Write Semantics",\n      "description": "Whether the new tags, terms and owners to be added will override the existing ones added only by this source or not. Value for this config can be \\"PATCH\\" or \\"OVERRIDE\\"",\n      "default": "PATCH",\n      "type": "string"\n    },\n    "strip_user_ids_from_email": {\n      "title": "Strip User Ids From Email",\n      "description": "Whether or not to strip email id while adding owners using dbt meta actions.",\n      "default": false,\n      "type": "boolean"\n    },\n    "enable_owner_extraction": {\n      "title": "Enable Owner Extraction",\n      "description": "When enabled, ownership info will be extracted from the dbt meta",\n      "default": true,\n      "type": "boolean"\n    },\n    "owner_extraction_pattern": {\n      "title": "Owner Extraction Pattern",\n      "description": "Regex string to extract owner from the dbt node using the `(?P<name>...) syntax` of the [match object](https://docs.python.org/3/library/re.html#match-objects), where the group name must be `owner`. Examples: (1)`r\\"(?P<owner>(.*)): (\\\\w+) (\\\\w+)\\"` will extract `jdoe` as the owner from `\\"jdoe: John Doe\\"` (2) `r\\"@(?P<owner>(.*))\\"` will extract `alice` as the owner from `\\"@alice\\"`.",\n      "type": "string"\n    },\n    "include_env_in_assertion_guid": {\n      "title": "Include Env In Assertion Guid",\n      "description": "Prior to version 0.9.4.2, the assertion GUIDs did not include the environment. If you\'re using multiple dbt ingestion that are only distinguished by env, then you should set this flag to True.",\n      "default": false,\n      "type": "boolean"\n    },\n    "convert_column_urns_to_lowercase": {\n      "title": "Convert Column Urns To Lowercase",\n      "description": "When enabled, converts column URNs to lowercase to ensure cross-platform compatibility. If `target_platform` is Snowflake, the default is True.",\n      "default": false,\n      "type": "boolean"\n    },\n    "use_compiled_code": {\n      "title": "Use Compiled Code",\n      "description": "When enabled, uses the compiled dbt code instead of the raw dbt node definition.",\n      "default": false,\n      "type": "boolean"\n    },\n    "test_warnings_are_errors": {\n      "title": "Test Warnings Are Errors",\n      "description": "When enabled, dbt test warnings will be treated as failures.",\n      "default": false,\n      "type": "boolean"\n    },\n    "infer_dbt_schemas": {\n      "title": "Infer Dbt Schemas",\n      "description": "When enabled, schemas will be inferred from the dbt node definition.",\n      "default": true,\n      "type": "boolean"\n    },\n    "include_column_lineage": {\n      "title": "Include Column Lineage",\n      "description": "When enabled, column-level lineage will be extracted from the dbt node definition. Requires `infer_dbt_schemas` to be enabled. If you run into issues where the column name casing does not match up with properly, providing a datahub_api or using the rest sink will improve accuracy.",\n      "default": true,\n      "type": "boolean"\n    },\n    "manifest_path": {\n      "title": "Manifest Path",\n      "description": "Path to dbt manifest JSON. See https://docs.getdbt.com/reference/artifacts/manifest-json Note this can be a local file or a URI.",\n      "type": "string"\n    },\n    "catalog_path": {\n      "title": "Catalog Path",\n      "description": "Path to dbt catalog JSON. See https://docs.getdbt.com/reference/artifacts/catalog-json Note this can be a local file or a URI.",\n      "type": "string"\n    },\n    "sources_path": {\n      "title": "Sources Path",\n      "description": "Path to dbt sources JSON. See https://docs.getdbt.com/reference/artifacts/sources-json. If not specified, last-modified fields will not be populated. Note this can be a local file or a URI.",\n      "type": "string"\n    },\n    "test_results_path": {\n      "title": "Test Results Path",\n      "description": "Path to output of dbt test run as run_results file in JSON format. See https://docs.getdbt.com/reference/artifacts/run-results-json. If not specified, test execution results will not be populated in DataHub.",\n      "type": "string"\n    },\n    "aws_connection": {\n      "title": "Aws Connection",\n      "description": "When fetching manifest files from s3, configuration for aws connection details",\n      "allOf": [\n        {\n          "$ref": "#/definitions/AwsConnectionConfig"\n        }\n      ]\n    },\n    "git_info": {\n      "title": "Git Info",\n      "description": "Reference to your git location to enable easy navigation from DataHub to your dbt files.",\n      "allOf": [\n        {\n          "$ref": "#/definitions/GitReference"\n        }\n      ]\n    }\n  },\n  "required": [\n    "target_platform",\n    "manifest_path",\n    "catalog_path"\n  ],\n  "additionalProperties": false,\n  "definitions": {\n    "DynamicTypedStateProviderConfig": {\n      "title": "DynamicTypedStateProviderConfig",\n      "type": "object",\n      "properties": {\n        "type": {\n          "title": "Type",\n          "description": "The type of the state provider to use. For DataHub use `datahub`",\n          "type": "string"\n        },\n        "config": {\n          "title": "Config",\n          "description": "The configuration required for initializing the state provider. Default: The datahub_api config if set at pipeline level. Otherwise, the default DatahubClientConfig. See the defaults (https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/graph/client.py#L19).",\n          "default": {},\n          "type": "object"\n        }\n      },\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false\n    },\n    "StatefulStaleMetadataRemovalConfig": {\n      "title": "StatefulStaleMetadataRemovalConfig",\n      "description": "Base specialized config for Stateful Ingestion with stale metadata removal capability.",\n      "type": "object",\n      "properties": {\n        "enabled": {\n          "title": "Enabled",\n          "description": "Whether or not to enable stateful ingest. Default: True if datahub-rest sink is used or if a `datahub_api` is specified, otherwise False",\n          "default": false,\n          "type": "boolean"\n        },\n        "remove_stale_metadata": {\n          "title": "Remove Stale Metadata",\n          "description": "Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled.",\n          "default": true,\n          "type": "boolean"\n        }\n      },\n      "additionalProperties": false\n    },\n    "EmitDirective": {\n      "title": "EmitDirective",\n      "description": "A holder for directives for emission for specific types of entities",\n      "enum": [\n        "YES",\n        "NO",\n        "ONLY"\n      ]\n    },\n    "DBTEntitiesEnabled": {\n      "title": "DBTEntitiesEnabled",\n      "description": "Controls which dbt entities are going to be emitted by this source",\n      "type": "object",\n      "properties": {\n        "models": {\n          "description": "Emit metadata for dbt models when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        },\n        "sources": {\n          "description": "Emit metadata for dbt sources when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        },\n        "seeds": {\n          "description": "Emit metadata for dbt seeds when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        },\n        "snapshots": {\n          "description": "Emit metadata for dbt snapshots when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        },\n        "test_definitions": {\n          "description": "Emit metadata for test definitions when enabled when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        },\n        "test_results": {\n          "description": "Emit metadata for test results when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        }\n      },\n      "additionalProperties": false\n    },\n    "AllowDenyPattern": {\n      "title": "AllowDenyPattern",\n      "description": "A class to store allow deny regexes",\n      "type": "object",\n      "properties": {\n        "allow": {\n          "title": "Allow",\n          "description": "List of regex patterns to include in ingestion",\n          "default": [\n            ".*"\n          ],\n          "type": "array",\n          "items": {\n            "type": "string"\n          }\n        },\n        "deny": {\n          "title": "Deny",\n          "description": "List of regex patterns to exclude from ingestion.",\n          "default": [],\n          "type": "array",\n          "items": {\n            "type": "string"\n          }\n        },\n        "ignoreCase": {\n          "title": "Ignorecase",\n          "description": "Whether to ignore case sensitivity during pattern matching.",\n          "default": true,\n          "type": "boolean"\n        }\n      },\n      "additionalProperties": false\n    },\n    "AwsAssumeRoleConfig": {\n      "title": "AwsAssumeRoleConfig",\n      "type": "object",\n      "properties": {\n        "RoleArn": {\n          "title": "Rolearn",\n          "description": "ARN of the role to assume.",\n          "type": "string"\n        },\n        "ExternalId": {\n          "title": "Externalid",\n          "description": "External ID to use when assuming the role.",\n          "type": "string"\n        }\n      },\n      "required": [\n        "RoleArn"\n      ]\n    },\n    "AwsConnectionConfig": {\n      "title": "AwsConnectionConfig",\n      "description": "Common AWS credentials config.\\n\\nCurrently used by:\\n    - Glue source\\n    - SageMaker source\\n    - dbt source",\n      "type": "object",\n      "properties": {\n        "aws_access_key_id": {\n          "title": "Aws Access Key Id",\n          "description": "AWS access key ID. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",\n          "type": "string"\n        },\n        "aws_secret_access_key": {\n          "title": "Aws Secret Access Key",\n          "description": "AWS secret access key. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",\n          "type": "string"\n        },\n        "aws_session_token": {\n          "title": "Aws Session Token",\n          "description": "AWS session token. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",\n          "type": "string"\n        },\n        "aws_role": {\n          "title": "Aws Role",\n          "description": "AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are documented at https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role",\n          "anyOf": [\n            {\n              "type": "string"\n            },\n            {\n              "type": "array",\n              "items": {\n                "anyOf": [\n                  {\n                    "type": "string"\n                  },\n                  {\n                    "$ref": "#/definitions/AwsAssumeRoleConfig"\n                  }\n                ]\n              }\n            }\n          ]\n        },\n        "aws_profile": {\n          "title": "Aws Profile",\n          "description": "Named AWS profile to use. Only used if access key / secret are unset. If not set the default will be used",\n          "type": "string"\n        },\n        "aws_region": {\n          "title": "Aws Region",\n          "description": "AWS region code.",\n          "type": "string"\n        },\n        "aws_endpoint_url": {\n          "title": "Aws Endpoint Url",\n          "description": "The AWS service endpoint. This is normally [constructed automatically](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html), but can be overridden here.",\n          "type": "string"\n        },\n        "aws_proxy": {\n          "title": "Aws Proxy",\n          "description": "A set of proxy configs to use with AWS. See the [botocore.config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html) docs for details.",\n          "type": "object",\n          "additionalProperties": {\n            "type": "string"\n          }\n        },\n        "read_timeout": {\n          "title": "Read Timeout",\n          "description": "The timeout for reading from the connection (in seconds).",\n          "default": 60,\n          "type": "number"\n        },\n        "aws_advanced_config": {\n          "title": "Aws Advanced Config",\n          "description": "Advanced AWS configuration options. These are passed directly to [botocore.config.Config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html).",\n          "type": "object"\n        }\n      },\n      "additionalProperties": false\n    },\n    "GitReference": {\n      "title": "GitReference",\n      "description": "Reference to a hosted Git repository. Used to generate \\"view source\\" links.",\n      "type": "object",\n      "properties": {\n        "repo": {\n          "title": "Repo",\n          "description": "Name of your Git repo e.g. https://github.com/datahub-project/datahub or https://gitlab.com/gitlab-org/gitlab. If organization/repo is provided, we assume it is a GitHub repo.",\n          "type": "string"\n        },\n        "branch": {\n          "title": "Branch",\n          "description": "Branch on which your files live by default. Typically main or master. This can also be a commit hash.",\n          "default": "main",\n          "type": "string"\n        },\n        "url_template": {\n          "title": "Url Template",\n          "description": "Template for generating a URL to a file in the repo e.g. \'{repo_url}/blob/{branch}/{file_path}\'. We can infer this for GitHub and GitLab repos, and it is otherwise required.It supports the following variables: {repo_url}, {branch}, {file_path}",\n          "type": "string"\n        }\n      },\n      "required": [\n        "repo"\n      ],\n      "additionalProperties": false\n    }\n  }\n}\n')))),(0,n.kt)("h3",{id:"dbt-meta-automated-mappings"},"dbt meta automated mappings"),(0,n.kt)("p",null,"dbt allows authors to define meta properties for datasets. Checkout this link to know more - ",(0,n.kt)("a",{parentName:"p",href:"https://docs.getdbt.com/reference/resource-configs/meta"},"dbt meta"),". Our dbt source allows users to define\nactions such as add a tag, term or owner. For example if a dbt model has a meta config ",(0,n.kt)("inlineCode",{parentName:"p"},'"has_pii": True'),", we can define an action\nthat evaluates if the property is set to true and add, lets say, a ",(0,n.kt)("inlineCode",{parentName:"p"},"pii")," tag.\nTo leverage this feature we require users to define mappings as part of the recipe. The following section describes how you can build these mappings. Listed below is a ",(0,n.kt)("inlineCode",{parentName:"p"},"meta_mapping")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"column_meta_mapping")," section that among other things, looks for keys like ",(0,n.kt)("inlineCode",{parentName:"p"},"business_owner")," and adds owners that are listed there."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'meta_mapping:\n  business_owner:\n    match: ".*"\n    operation: "add_owner"\n    config:\n      owner_type: user\n      owner_category: BUSINESS_OWNER\n  has_pii:\n    match: True\n    operation: "add_tag"\n    config:\n      tag: "has_pii_test"\n  int_property:\n    match: 1\n    operation: "add_tag"\n    config:\n      tag: "int_meta_property"\n  double_property:\n    match: 2.5\n    operation: "add_term"\n    config:\n      term: "double_meta_property"\n  data_governance.team_owner:\n    match: "Finance"\n    operation: "add_term"\n    config:\n      term: "Finance_test"\n  terms_list:\n    match: ".*"\n    operation: "add_terms"\n    config:\n      separator: ","\n  documentation_link:\n    match: "(?:https?)?\\:\\/\\/\\w*[^#]*"\n    operation: "add_doc_link"\n    config:\n      link: {{ $match }}\n      description: "Documentation Link"\ncolumn_meta_mapping:\n  terms_list:\n    match: ".*"\n    operation: "add_terms"\n    config:\n      separator: ","\n  is_sensitive:\n    match: True\n    operation: "add_tag"\n    config:\n      tag: "sensitive"\n')),(0,n.kt)("p",null,"We support the following operations:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"add_tag - Requires ",(0,n.kt)("inlineCode",{parentName:"li"},"tag")," property in config."),(0,n.kt)("li",{parentName:"ol"},"add_term - Requires ",(0,n.kt)("inlineCode",{parentName:"li"},"term")," property in config."),(0,n.kt)("li",{parentName:"ol"},"add_terms - Accepts an optional ",(0,n.kt)("inlineCode",{parentName:"li"},"separator")," property in config."),(0,n.kt)("li",{parentName:"ol"},"add_owner - Requires ",(0,n.kt)("inlineCode",{parentName:"li"},"owner_type")," property in config which can be either user or group. Optionally accepts the ",(0,n.kt)("inlineCode",{parentName:"li"},"owner_category")," config property which can be set to either a ",(0,n.kt)("a",{parentName:"li",href:"/docs/next/ownership/ownership-types"},"custom ownership type")," urn like ",(0,n.kt)("inlineCode",{parentName:"li"},"urn:li:ownershipType:architect")," or one of ",(0,n.kt)("inlineCode",{parentName:"li"},"['TECHNICAL_OWNER', 'BUSINESS_OWNER', 'DATA_STEWARD', 'DATAOWNER'")," (defaults to ",(0,n.kt)("inlineCode",{parentName:"li"},"DATAOWNER"),")."),(0,n.kt)("li",{parentName:"ol"},"add_doc_link - Requires ",(0,n.kt)("inlineCode",{parentName:"li"},"link")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"description")," properties in config. Upon ingestion run, this will overwrite current links in the institutional knowledge section with this new link. The anchor text is defined here in the meta_mappings as ",(0,n.kt)("inlineCode",{parentName:"li"},"description"),".")),(0,n.kt)("p",null,"Note:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The dbt ",(0,n.kt)("inlineCode",{parentName:"li"},"meta_mapping")," config works at the model level, while the ",(0,n.kt)("inlineCode",{parentName:"li"},"column_meta_mapping")," config works at the column level. The ",(0,n.kt)("inlineCode",{parentName:"li"},"add_owner")," operation is not supported at the column level."),(0,n.kt)("li",{parentName:"ol"},"For string meta properties we support regex matching.")),(0,n.kt)("p",null,"With regex matching, you can also use the matched value to customize how you populate the tag, term or owner fields. Here are a few advanced examples:"),(0,n.kt)("h4",{id:"data-tier---bronze-silver-gold"},"Data Tier - Bronze, Silver, Gold"),(0,n.kt)("p",null,"If your meta section looks like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"meta:\n  data_tier: Bronze # chosen from [Bronze,Gold,Silver]\n")),(0,n.kt)("p",null,"and you wanted to attach a glossary term like ",(0,n.kt)("inlineCode",{parentName:"p"},"urn:li:glossaryTerm:Bronze")," for all the models that have this value in the meta section attached to them, the following meta_mapping section would achieve that outcome:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'meta_mapping:\n  data_tier:\n    match: "Bronze|Silver|Gold"\n    operation: "add_term"\n    config:\n      term: "{{ $match }}"\n')),(0,n.kt)("p",null,"to match any data_tier of Bronze, Silver or Gold and maps it to a glossary term with the same name."),(0,n.kt)("h4",{id:"case-numbers---create-tags"},"Case Numbers - create tags"),(0,n.kt)("p",null,"If your meta section looks like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"meta:\n  case: PLT-4678 # internal Case Number\n")),(0,n.kt)("p",null,"and you want to generate tags that look like ",(0,n.kt)("inlineCode",{parentName:"p"},"case_4678")," from this, you can use the following meta_mapping section:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'meta_mapping:\n  case:\n    match: "PLT-(.*)"\n    operation: "add_tag"\n     config:\n       tag: "case_{{ $match }}"\n')),(0,n.kt)("h4",{id:"stripping-out-leading--sign"},"Stripping out leading @ sign"),(0,n.kt)("p",null,"You can also match specific groups within the value to extract subsets of the matched value. e.g. if you have a meta section that looks like this:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'meta:\n  owner: "@finance-team"\n  business_owner: "@janet"\n')),(0,n.kt)("p",null,"and you want to mark the finance-team as a group that owns the dataset (skipping the leading @ sign), while marking janet as an individual user (again, skipping the leading @ sign) that owns the dataset, you can use the following meta-mapping section."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'meta_mapping:\n  owner:\n    match: "^@(.*)"\n    operation: "add_owner"\n    config:\n      owner_type: group\n  business_owner:\n    match: "^@(?P<owner>(.*))"\n    operation: "add_owner"\n    config:\n      owner_type: user\n      owner_category: BUSINESS_OWNER\n')),(0,n.kt)("p",null,"In the examples above, we show two ways of writing the matching regexes. In the first one, ",(0,n.kt)("inlineCode",{parentName:"p"},"^@(.*)")," the first matching group (a.k.a. match.group(1)) is automatically inferred. In the second example, ",(0,n.kt)("inlineCode",{parentName:"p"},"^@(?P<owner>(.*))"),", we use a named matching group (called owner, since we are matching an owner) to capture the string we want to provide to the ownership urn."),(0,n.kt)("h3",{id:"dbt-query_tag-automated-mappings"},"dbt query_tag automated mappings"),(0,n.kt)("p",null,"This works similarly as the dbt meta mapping but for the query tags"),(0,n.kt)("p",null,"We support the below actions -"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"add_tag - Requires ",(0,n.kt)("inlineCode",{parentName:"li"},"tag")," property in config.")),(0,n.kt)("p",null,"The below example set as global tag the query tag ",(0,n.kt)("inlineCode",{parentName:"p"},"tag")," key's value."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'"query_tag_mapping":\n{\n   "tag":\n      "match": ".*"\n      "operation": "add_tag"\n      "config":\n        "tag": "{{ $match }}"\n}\n')),(0,n.kt)("h3",{id:"integrating-with-dbt-test"},"Integrating with dbt test"),(0,n.kt)("p",null,"To integrate with dbt tests, the ",(0,n.kt)("inlineCode",{parentName:"p"},"dbt")," source needs access to the ",(0,n.kt)("inlineCode",{parentName:"p"},"run_results.json")," file generated after a ",(0,n.kt)("inlineCode",{parentName:"p"},"dbt test")," execution. Typically, this is written to the ",(0,n.kt)("inlineCode",{parentName:"p"},"target")," directory. A common pattern you can follow is:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Run ",(0,n.kt)("inlineCode",{parentName:"li"},"dbt docs generate")," and upload ",(0,n.kt)("inlineCode",{parentName:"li"},"manifest.json")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"catalog.json")," to a location accessible to the ",(0,n.kt)("inlineCode",{parentName:"li"},"dbt")," source (e.g. s3 or local file system)"),(0,n.kt)("li",{parentName:"ol"},"Run ",(0,n.kt)("inlineCode",{parentName:"li"},"dbt test")," and upload ",(0,n.kt)("inlineCode",{parentName:"li"},"run_results.json")," to a location accessible to the ",(0,n.kt)("inlineCode",{parentName:"li"},"dbt")," source (e.g. s3 or local file system)"),(0,n.kt)("li",{parentName:"ol"},"Run ",(0,n.kt)("inlineCode",{parentName:"li"},"datahub ingest -c dbt_recipe.dhub.yaml")," with the following config parameters specified",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"test_results_path: pointing to the run_results.json file that you just created")))),(0,n.kt)("p",null,"The connector will produce the following things:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Assertion definitions that are attached to the dataset (or datasets)"),(0,n.kt)("li",{parentName:"ul"},"Results from running the tests attached to the timeline of the dataset")),(0,n.kt)("h4",{id:"view-of-dbt-tests-for-a-dataset"},"View of dbt tests for a dataset"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/dbt-tests-view.png",alt:"test view"})),(0,n.kt)("h4",{id:"viewing-the-sql-for-a-dbt-test"},"Viewing the SQL for a dbt test"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/dbt-test-logic-view.png",alt:"test logic view"})),(0,n.kt)("h4",{id:"viewing-timeline-for-a-failed-dbt-test"},"Viewing timeline for a failed dbt test"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/datahub-project/static-assets/main/imgs/dbt-tests-failure-view.png",alt:"test view"})),(0,n.kt)("h4",{id:"separating-test-result-emission-from-other-metadata-emission"},"Separating test result emission from other metadata emission"),(0,n.kt)("p",null,"You can segregate emission of test results from the emission of other dbt metadata using the ",(0,n.kt)("inlineCode",{parentName:"p"},"entities_enabled")," config flag.\nThe following recipe shows you how to emit only test results."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"source:\n  type: dbt\n  config:\n    manifest_path: _path_to_manifest_json\n    catalog_path: _path_to_catalog_json\n    test_results_path: _path_to_run_results_json\n    target_platform: postgres\n    entities_enabled:\n      test_results: Only\n")),(0,n.kt)("p",null,"Similarly, the following recipe shows you how to emit everything (i.e. models, sources, seeds, test definitions) but not test results:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"source:\n  type: dbt\n  config:\n    manifest_path: _path_to_manifest_json\n    catalog_path: _path_to_catalog_json\n    run_results_path: _path_to_run_results_json\n    target_platform: postgres\n    entities_enabled:\n      test_results: No\n")),(0,n.kt)("h3",{id:"code-coordinates"},"Code Coordinates"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Class Name: ",(0,n.kt)("inlineCode",{parentName:"li"},"datahub.ingestion.source.dbt.dbt_core.DBTCoreSource")),(0,n.kt)("li",{parentName:"ul"},"Browse on ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/source/dbt/dbt_core.py"},"GitHub"))),(0,n.kt)("h2",{id:"module-dbt-cloud"},"Module ",(0,n.kt)("inlineCode",{parentName:"h2"},"dbt-cloud")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/support%20status-incubating-blue",alt:"Incubating"})),(0,n.kt)("h3",{id:"important-capabilities-1"},"Important Capabilities"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Capability"),(0,n.kt)("th",{parentName:"tr",align:null},"Status"),(0,n.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Column-level Lineage"),(0,n.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,n.kt)("td",{parentName:"tr",align:null},"Enabled by default, configure using ",(0,n.kt)("inlineCode",{parentName:"td"},"include_column_lineage"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/next/metadata-ingestion/docs/dev_guides/stateful#stale-entity-removal"},"Detect Deleted Entities")),(0,n.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,n.kt)("td",{parentName:"tr",align:null},"Enabled via stateful ingestion")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Table-Level Lineage"),(0,n.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,n.kt)("td",{parentName:"tr",align:null},"Enabled by default")))),(0,n.kt)("p",null,"This source pulls dbt metadata directly from the dbt Cloud APIs."),(0,n.kt)("p",null,'You\'ll need to have a dbt Cloud job set up to run your dbt project, and "Generate docs on run" should be enabled.'),(0,n.kt)("p",null,'The token should have the "read metadata" permission.'),(0,n.kt)("p",null,'To get the required IDs, go to the job details page (this is the one with the "Run History" table), and look at the URL.\nIt should look something like this: ',(0,n.kt)("a",{parentName:"p",href:"https://cloud.getdbt.com/next/deploy/107298/projects/175705/jobs/148094"},"https://cloud.getdbt.com/next/deploy/107298/projects/175705/jobs/148094"),".\nIn this example, the account ID is 107298, the project ID is 175705, and the job ID is 148094."),(0,n.kt)("h3",{id:"cli-based-ingestion-1"},"CLI based Ingestion"),(0,n.kt)("h4",{id:"install-the-plugin-1"},"Install the Plugin"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"pip install 'acryl-datahub[dbt-cloud]'\n")),(0,n.kt)("h3",{id:"starter-recipe-1"},"Starter Recipe"),(0,n.kt)("p",null,"Check out the following recipe to get started with ingestion! See ",(0,n.kt)("a",{parentName:"p",href:"#config-details"},"below")," for full configuration options."),(0,n.kt)("p",null,"For general pointers on writing and running a recipe, see our ",(0,n.kt)("a",{parentName:"p",href:"/docs/next/metadata-ingestion#recipes"},"main recipe guide"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: "dbt-cloud"\n  config:\n    token: ${DBT_CLOUD_TOKEN}\n\n    # In the URL https://cloud.getdbt.com/next/deploy/107298/projects/175705/jobs/148094,\n    # 107298 is the account_id, 175705 is the project_id, and 148094 is the job_id\n\n    account_id: "${DBT_ACCOUNT_ID}" # set to your dbt cloud account id\n    project_id: "${DBT_PROJECT_ID}" # set to your dbt cloud project id\n    job_id: "${DBT_JOB_ID}" # set to your dbt cloud job id\n    run_id: # set to your dbt cloud run id. This is optional, and defaults to the latest run\n\n    target_platform: postgres\n\n    # Options\n    target_platform: "${TARGET_PLATFORM_ID}" # e.g. bigquery/postgres/etc.\n\n# sink configs\n\n')),(0,n.kt)("h3",{id:"config-details-1"},"Config Details"),(0,n.kt)(i.Z,{mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"options",label:"Options",default:!0,mdxType:"TabItem"},(0,n.kt)("p",null,"Note that a ",(0,n.kt)("inlineCode",{parentName:"p"},".")," is used to denote nested fields in the YAML recipe."),(0,n.kt)("div",{className:"config-table"},(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"account_id"),"\xa0",(0,n.kt)("abbr",{title:"Required"},"\u2705"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"integer"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The DBT Cloud account ID to use.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"job_id"),"\xa0",(0,n.kt)("abbr",{title:"Required"},"\u2705"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"integer"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The ID of the job to ingest metadata from.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"project_id"),"\xa0",(0,n.kt)("abbr",{title:"Required"},"\u2705"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"integer"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The dbt Cloud project ID to use.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"target_platform"),"\xa0",(0,n.kt)("abbr",{title:"Required"},"\u2705"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The platform that dbt is loading onto. (e.g. bigquery / redshift / postgres etc.)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"token"),"\xa0",(0,n.kt)("abbr",{title:"Required"},"\u2705"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The API token to use to authenticate with DBT Cloud.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"access_url"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The base URL of the dbt Cloud instance to use. This should be the URL you use to access the dbt Cloud UI. It should include the scheme (http/https) and not include a trailing slash. See the access url for your dbt Cloud region here: ",(0,n.kt)("a",{parentName:"td",href:"https://docs.getdbt.com/docs/cloud/about-cloud/regions-ip-addresses"},"https://docs.getdbt.com/docs/cloud/about-cloud/regions-ip-addresses")," ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},(0,n.kt)("a",{parentName:"td",href:"https://cloud.getdbt.com"},"https://cloud.getdbt.com"))))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"column_meta_mapping"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"object"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"mapping rules that will be executed against dbt column meta properties. Refer to the section below on dbt meta automated mappings. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"{","}")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"convert_column_urns_to_lowercase"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, converts column URNs to lowercase to ensure cross-platform compatibility. If ",(0,n.kt)("inlineCode",{parentName:"td"},"target_platform")," is Snowflake, the default is True. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"enable_meta_mapping"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, applies the mappings that are defined through the meta_mapping directives. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"enable_owner_extraction"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, ownership info will be extracted from the dbt meta ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"enable_query_tag_mapping"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, applies the mappings that are defined through the ",(0,n.kt)("inlineCode",{parentName:"td"},"query_tag_mapping")," directives. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"include_column_lineage"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, column-level lineage will be extracted from the dbt node definition. Requires ",(0,n.kt)("inlineCode",{parentName:"td"},"infer_dbt_schemas")," to be enabled. If you run into issues where the column name casing does not match up with properly, providing a datahub_api or using the rest sink will improve accuracy. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"include_env_in_assertion_guid"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Prior to version 0.9.4.2, the assertion GUIDs did not include the environment. If you're using multiple dbt ingestion that are only distinguished by env, then you should set this flag to True. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"incremental_lineage"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, emits incremental/patch lineage for non-dbt entities. When disabled, re-states lineage on each run. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"infer_dbt_schemas"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, schemas will be inferred from the dbt node definition. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"meta_mapping"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"object"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"mapping rules that will be executed against dbt meta properties. Refer to the section below on dbt meta automated mappings. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"{","}")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"metadata_endpoint"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The dbt Cloud metadata API endpoint. This is deprecated, and will be removed in a future release. Please use access_url instead. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},(0,n.kt)("a",{parentName:"td",href:"https://metadata.cloud.getdbt.com/graphql"},"https://metadata.cloud.getdbt.com/graphql"))))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"owner_extraction_pattern"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Regex string to extract owner from the dbt node using the ",(0,n.kt)("inlineCode",{parentName:"td"},"(?P<name>...) syntax")," of the ",(0,n.kt)("a",{parentName:"td",href:"https://docs.python.org/3/library/re.html#match-objects"},"match object"),", where the group name must be ",(0,n.kt)("inlineCode",{parentName:"td"},"owner"),". Examples: (1)",(0,n.kt)("inlineCode",{parentName:"td"},'r"(?P<owner>(.*)): (\\w+) (\\w+)"')," will extract ",(0,n.kt)("inlineCode",{parentName:"td"},"jdoe")," as the owner from ",(0,n.kt)("inlineCode",{parentName:"td"},'"jdoe: John Doe"')," (2) ",(0,n.kt)("inlineCode",{parentName:"td"},'r"@(?P<owner>(.*))"')," will extract ",(0,n.kt)("inlineCode",{parentName:"td"},"alice")," as the owner from ",(0,n.kt)("inlineCode",{parentName:"td"},'"@alice"'),".")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"platform_instance"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The instance of the platform that all assets produced by this recipe belong to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"query_tag_mapping"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"object"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"mapping rules that will be executed against dbt query_tag meta properties. Refer to the section below on dbt meta automated mappings. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"{","}")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"run_id"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"integer"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The ID of the run to ingest metadata from. If not specified, we'll default to the latest run.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"strip_user_ids_from_email"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Whether or not to strip email id while adding owners using dbt meta actions. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"tag_prefix"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Prefix added to tags during ingestion. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"dbt:")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"target_platform_instance"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The platform instance for the platform that dbt is operating on. Use this if you have multiple instances of the same platform (e.g. redshift) and need to distinguish between them.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"test_warnings_are_errors"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, dbt test warnings will be treated as failures. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"use_compiled_code"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"When enabled, uses the compiled dbt code instead of the raw dbt node definition. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"use_identifiers"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Use model identifier instead of model name if defined (if not, default to model name). ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"write_semantics"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},'Whether the new tags, terms and owners to be added will override the existing ones added only by this source or not. Value for this config can be "PATCH" or "OVERRIDE" ',(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"PATCH")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"env"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Environment to use in namespace when constructing URNs. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"PROD")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"entities_enabled"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"DBTEntitiesEnabled"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Controls for enabling / disabling metadata emission for different dbt entities (models, test definitions, test results, etc.) ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"{","'","models","'",": ","'","YES","'",", ","'","sources","'",": ","'","YES","'",", ","'","seeds","'",": ","'","YES","'","...")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"models"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for dbt models when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"seeds"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for dbt seeds when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"snapshots"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for dbt snapshots when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"sources"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for dbt sources when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"test_definitions"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for test definitions when enabled when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"entities_enabled."),(0,n.kt)("span",{className:"path-main"},"test_results"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"Enum"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Emit metadata for test results when set to Yes or Only ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"YES")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"node_name_pattern"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"AllowDenyPattern"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"regex patterns for dbt model names to filter in ingestion. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"{","'","allow","'",": ","[","'",".","*","'","]",", ","'","deny","'",": ","[","]",", ","'","ignoreCase","'",": True","}")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"node_name_pattern."),(0,n.kt)("span",{className:"path-main"},"ignoreCase"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Whether to ignore case sensitivity during pattern matching. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"node_name_pattern."),(0,n.kt)("span",{className:"path-main"},"allow"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"array"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"List of regex patterns to include in ingestion ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"[","'",".","*","'","]")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"node_name_pattern.allow."),(0,n.kt)("span",{className:"path-main"},"string"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"node_name_pattern."),(0,n.kt)("span",{className:"path-main"},"deny"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"array"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"List of regex patterns to exclude from ingestion. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"[","]")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"node_name_pattern.deny."),(0,n.kt)("span",{className:"path-main"},"string"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"string"))),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-main"},"stateful_ingestion"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"StatefulStaleMetadataRemovalConfig"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"DBT Stateful Ingestion Config.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"stateful_ingestion."),(0,n.kt)("span",{className:"path-main"},"enabled"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Whether or not to enable stateful ingest. Default: True if datahub-rest sink is used or if a ",(0,n.kt)("inlineCode",{parentName:"td"},"datahub_api")," is specified, otherwise False ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"False")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("div",{className:"path-line"},(0,n.kt)("span",{className:"path-prefix"},"stateful_ingestion."),(0,n.kt)("span",{className:"path-main"},"remove_stale_metadata"))," ",(0,n.kt)("div",{className:"type-name-line"},(0,n.kt)("span",{className:"type-name"},"boolean"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled. ",(0,n.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,n.kt)("span",{className:"default-value"},"True")))))))),(0,n.kt)(s.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,n.kt)("p",null,"The ",(0,n.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSONSchema")," for this configuration is inlined below."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "title": "DBTCloudConfig",\n  "description": "Base configuration class for stateful ingestion for source configs to inherit from.",\n  "type": "object",\n  "properties": {\n    "incremental_lineage": {\n      "title": "Incremental Lineage",\n      "description": "When enabled, emits incremental/patch lineage for non-dbt entities. When disabled, re-states lineage on each run.",\n      "default": true,\n      "type": "boolean"\n    },\n    "env": {\n      "title": "Env",\n      "description": "Environment to use in namespace when constructing URNs.",\n      "default": "PROD",\n      "type": "string"\n    },\n    "platform_instance": {\n      "title": "Platform Instance",\n      "description": "The instance of the platform that all assets produced by this recipe belong to",\n      "type": "string"\n    },\n    "stateful_ingestion": {\n      "title": "Stateful Ingestion",\n      "description": "DBT Stateful Ingestion Config.",\n      "allOf": [\n        {\n          "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"\n        }\n      ]\n    },\n    "target_platform": {\n      "title": "Target Platform",\n      "description": "The platform that dbt is loading onto. (e.g. bigquery / redshift / postgres etc.)",\n      "type": "string"\n    },\n    "target_platform_instance": {\n      "title": "Target Platform Instance",\n      "description": "The platform instance for the platform that dbt is operating on. Use this if you have multiple instances of the same platform (e.g. redshift) and need to distinguish between them.",\n      "type": "string"\n    },\n    "use_identifiers": {\n      "title": "Use Identifiers",\n      "description": "Use model identifier instead of model name if defined (if not, default to model name).",\n      "default": false,\n      "type": "boolean"\n    },\n    "entities_enabled": {\n      "title": "Entities Enabled",\n      "description": "Controls for enabling / disabling metadata emission for different dbt entities (models, test definitions, test results, etc.)",\n      "default": {\n        "models": "YES",\n        "sources": "YES",\n        "seeds": "YES",\n        "snapshots": "YES",\n        "test_definitions": "YES",\n        "test_results": "YES"\n      },\n      "allOf": [\n        {\n          "$ref": "#/definitions/DBTEntitiesEnabled"\n        }\n      ]\n    },\n    "tag_prefix": {\n      "title": "Tag Prefix",\n      "description": "Prefix added to tags during ingestion.",\n      "default": "dbt:",\n      "type": "string"\n    },\n    "node_name_pattern": {\n      "title": "Node Name Pattern",\n      "description": "regex patterns for dbt model names to filter in ingestion.",\n      "default": {\n        "allow": [\n          ".*"\n        ],\n        "deny": [],\n        "ignoreCase": true\n      },\n      "allOf": [\n        {\n          "$ref": "#/definitions/AllowDenyPattern"\n        }\n      ]\n    },\n    "meta_mapping": {\n      "title": "Meta Mapping",\n      "description": "mapping rules that will be executed against dbt meta properties. Refer to the section below on dbt meta automated mappings.",\n      "default": {},\n      "type": "object"\n    },\n    "column_meta_mapping": {\n      "title": "Column Meta Mapping",\n      "description": "mapping rules that will be executed against dbt column meta properties. Refer to the section below on dbt meta automated mappings.",\n      "default": {},\n      "type": "object"\n    },\n    "enable_meta_mapping": {\n      "title": "Enable Meta Mapping",\n      "description": "When enabled, applies the mappings that are defined through the meta_mapping directives.",\n      "default": true,\n      "type": "boolean"\n    },\n    "query_tag_mapping": {\n      "title": "Query Tag Mapping",\n      "description": "mapping rules that will be executed against dbt query_tag meta properties. Refer to the section below on dbt meta automated mappings.",\n      "default": {},\n      "type": "object"\n    },\n    "enable_query_tag_mapping": {\n      "title": "Enable Query Tag Mapping",\n      "description": "When enabled, applies the mappings that are defined through the `query_tag_mapping` directives.",\n      "default": true,\n      "type": "boolean"\n    },\n    "write_semantics": {\n      "title": "Write Semantics",\n      "description": "Whether the new tags, terms and owners to be added will override the existing ones added only by this source or not. Value for this config can be \\"PATCH\\" or \\"OVERRIDE\\"",\n      "default": "PATCH",\n      "type": "string"\n    },\n    "strip_user_ids_from_email": {\n      "title": "Strip User Ids From Email",\n      "description": "Whether or not to strip email id while adding owners using dbt meta actions.",\n      "default": false,\n      "type": "boolean"\n    },\n    "enable_owner_extraction": {\n      "title": "Enable Owner Extraction",\n      "description": "When enabled, ownership info will be extracted from the dbt meta",\n      "default": true,\n      "type": "boolean"\n    },\n    "owner_extraction_pattern": {\n      "title": "Owner Extraction Pattern",\n      "description": "Regex string to extract owner from the dbt node using the `(?P<name>...) syntax` of the [match object](https://docs.python.org/3/library/re.html#match-objects), where the group name must be `owner`. Examples: (1)`r\\"(?P<owner>(.*)): (\\\\w+) (\\\\w+)\\"` will extract `jdoe` as the owner from `\\"jdoe: John Doe\\"` (2) `r\\"@(?P<owner>(.*))\\"` will extract `alice` as the owner from `\\"@alice\\"`.",\n      "type": "string"\n    },\n    "include_env_in_assertion_guid": {\n      "title": "Include Env In Assertion Guid",\n      "description": "Prior to version 0.9.4.2, the assertion GUIDs did not include the environment. If you\'re using multiple dbt ingestion that are only distinguished by env, then you should set this flag to True.",\n      "default": false,\n      "type": "boolean"\n    },\n    "convert_column_urns_to_lowercase": {\n      "title": "Convert Column Urns To Lowercase",\n      "description": "When enabled, converts column URNs to lowercase to ensure cross-platform compatibility. If `target_platform` is Snowflake, the default is True.",\n      "default": false,\n      "type": "boolean"\n    },\n    "use_compiled_code": {\n      "title": "Use Compiled Code",\n      "description": "When enabled, uses the compiled dbt code instead of the raw dbt node definition.",\n      "default": false,\n      "type": "boolean"\n    },\n    "test_warnings_are_errors": {\n      "title": "Test Warnings Are Errors",\n      "description": "When enabled, dbt test warnings will be treated as failures.",\n      "default": false,\n      "type": "boolean"\n    },\n    "infer_dbt_schemas": {\n      "title": "Infer Dbt Schemas",\n      "description": "When enabled, schemas will be inferred from the dbt node definition.",\n      "default": true,\n      "type": "boolean"\n    },\n    "include_column_lineage": {\n      "title": "Include Column Lineage",\n      "description": "When enabled, column-level lineage will be extracted from the dbt node definition. Requires `infer_dbt_schemas` to be enabled. If you run into issues where the column name casing does not match up with properly, providing a datahub_api or using the rest sink will improve accuracy.",\n      "default": true,\n      "type": "boolean"\n    },\n    "access_url": {\n      "title": "Access Url",\n      "description": "The base URL of the dbt Cloud instance to use. This should be the URL you use to access the dbt Cloud UI. It should include the scheme (http/https) and not include a trailing slash. See the access url for your dbt Cloud region here: https://docs.getdbt.com/docs/cloud/about-cloud/regions-ip-addresses",\n      "default": "https://cloud.getdbt.com",\n      "type": "string"\n    },\n    "metadata_endpoint": {\n      "title": "Metadata Endpoint",\n      "description": "The dbt Cloud metadata API endpoint. This is deprecated, and will be removed in a future release. Please use access_url instead.",\n      "default": "https://metadata.cloud.getdbt.com/graphql",\n      "deprecated": true,\n      "type": "string"\n    },\n    "token": {\n      "title": "Token",\n      "description": "The API token to use to authenticate with DBT Cloud.",\n      "type": "string"\n    },\n    "account_id": {\n      "title": "Account Id",\n      "description": "The DBT Cloud account ID to use.",\n      "type": "integer"\n    },\n    "project_id": {\n      "title": "Project Id",\n      "description": "The dbt Cloud project ID to use.",\n      "type": "integer"\n    },\n    "job_id": {\n      "title": "Job Id",\n      "description": "The ID of the job to ingest metadata from.",\n      "type": "integer"\n    },\n    "run_id": {\n      "title": "Run Id",\n      "description": "The ID of the run to ingest metadata from. If not specified, we\'ll default to the latest run.",\n      "type": "integer"\n    }\n  },\n  "required": [\n    "target_platform",\n    "token",\n    "account_id",\n    "project_id",\n    "job_id"\n  ],\n  "additionalProperties": false,\n  "definitions": {\n    "DynamicTypedStateProviderConfig": {\n      "title": "DynamicTypedStateProviderConfig",\n      "type": "object",\n      "properties": {\n        "type": {\n          "title": "Type",\n          "description": "The type of the state provider to use. For DataHub use `datahub`",\n          "type": "string"\n        },\n        "config": {\n          "title": "Config",\n          "description": "The configuration required for initializing the state provider. Default: The datahub_api config if set at pipeline level. Otherwise, the default DatahubClientConfig. See the defaults (https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/graph/client.py#L19).",\n          "default": {},\n          "type": "object"\n        }\n      },\n      "required": [\n        "type"\n      ],\n      "additionalProperties": false\n    },\n    "StatefulStaleMetadataRemovalConfig": {\n      "title": "StatefulStaleMetadataRemovalConfig",\n      "description": "Base specialized config for Stateful Ingestion with stale metadata removal capability.",\n      "type": "object",\n      "properties": {\n        "enabled": {\n          "title": "Enabled",\n          "description": "Whether or not to enable stateful ingest. Default: True if datahub-rest sink is used or if a `datahub_api` is specified, otherwise False",\n          "default": false,\n          "type": "boolean"\n        },\n        "remove_stale_metadata": {\n          "title": "Remove Stale Metadata",\n          "description": "Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled.",\n          "default": true,\n          "type": "boolean"\n        }\n      },\n      "additionalProperties": false\n    },\n    "EmitDirective": {\n      "title": "EmitDirective",\n      "description": "A holder for directives for emission for specific types of entities",\n      "enum": [\n        "YES",\n        "NO",\n        "ONLY"\n      ]\n    },\n    "DBTEntitiesEnabled": {\n      "title": "DBTEntitiesEnabled",\n      "description": "Controls which dbt entities are going to be emitted by this source",\n      "type": "object",\n      "properties": {\n        "models": {\n          "description": "Emit metadata for dbt models when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        },\n        "sources": {\n          "description": "Emit metadata for dbt sources when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        },\n        "seeds": {\n          "description": "Emit metadata for dbt seeds when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        },\n        "snapshots": {\n          "description": "Emit metadata for dbt snapshots when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        },\n        "test_definitions": {\n          "description": "Emit metadata for test definitions when enabled when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        },\n        "test_results": {\n          "description": "Emit metadata for test results when set to Yes or Only",\n          "default": "YES",\n          "allOf": [\n            {\n              "$ref": "#/definitions/EmitDirective"\n            }\n          ]\n        }\n      },\n      "additionalProperties": false\n    },\n    "AllowDenyPattern": {\n      "title": "AllowDenyPattern",\n      "description": "A class to store allow deny regexes",\n      "type": "object",\n      "properties": {\n        "allow": {\n          "title": "Allow",\n          "description": "List of regex patterns to include in ingestion",\n          "default": [\n            ".*"\n          ],\n          "type": "array",\n          "items": {\n            "type": "string"\n          }\n        },\n        "deny": {\n          "title": "Deny",\n          "description": "List of regex patterns to exclude from ingestion.",\n          "default": [],\n          "type": "array",\n          "items": {\n            "type": "string"\n          }\n        },\n        "ignoreCase": {\n          "title": "Ignorecase",\n          "description": "Whether to ignore case sensitivity during pattern matching.",\n          "default": true,\n          "type": "boolean"\n        }\n      },\n      "additionalProperties": false\n    }\n  }\n}\n')))),(0,n.kt)("h3",{id:"code-coordinates-1"},"Code Coordinates"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Class Name: ",(0,n.kt)("inlineCode",{parentName:"li"},"datahub.ingestion.source.dbt.dbt_cloud.DBTCloudSource")),(0,n.kt)("li",{parentName:"ul"},"Browse on ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/source/dbt/dbt_cloud.py"},"GitHub"))),(0,n.kt)("h2",null,"Questions"),(0,n.kt)("p",null,"If you've got any questions on configuring ingestion for dbt, feel free to ping us on ",(0,n.kt)("a",{parentName:"p",href:"https://slack.datahubproject.io"},"our Slack"),"."))}k.isMDXComponent=!0}}]);