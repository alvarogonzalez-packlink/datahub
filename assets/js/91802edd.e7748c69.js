"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[74990],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,l=e.originalType,o=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=p(a),u=s,k=m["".concat(o,".").concat(u)]||m[u]||d[u]||l;return a?n.createElement(k,i(i({ref:t},c),{},{components:a})):n.createElement(k,i({ref:t},c))}));function u(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var l=a.length,i=new Array(l);i[0]=m;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r.mdxType="string"==typeof e?e:s,i[1]=r;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},18679:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),s=a(86010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(l,i),hidden:a},t)}},34259:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(83117),s=a(67294),l=a(86010),i=a(51048),r=a(33609),o=a(1943),p=a(72957);const c="tabList__CuJ",d="tabItem_LNqP";function m(e){const{lazy:t,block:a,defaultValue:i,values:m,groupId:u,className:k}=e,f=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??f.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,r.l)(h,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===i?i:i??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==b&&!h.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:N}=(0,o.U)(),[v,_]=(0,s.useState)(b),w=[],{blockElementScrollPositionUntilNextRender:S}=(0,p.o5)();if(null!=u){const e=y[u];null!=e&&e!==v&&h.some((t=>t.value===e))&&_(e)}const C=e=>{const t=e.currentTarget,a=w.indexOf(t),n=h[a].value;n!==v&&(S(t),_(n),null!=u&&N(u,String(n)))},A=e=>{let t=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const a=w.indexOf(e.currentTarget)+1;t=w[a]??w[0];break}case"ArrowLeft":{const a=w.indexOf(e.currentTarget)-1;t=w[a]??w[w.length-1];break}}t?.focus()};return s.createElement("div",{className:(0,l.Z)("tabs-container",c)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},k)},h.map((e=>{let{value:t,label:a,attributes:i}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>w.push(e),onKeyDown:A,onClick:C},i,{className:(0,l.Z)("tabs__item",d,i?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,s.cloneElement)(f.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function u(e){const t=(0,i.Z)();return s.createElement(m,(0,n.Z)({key:String(t)},e))}},58494:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var n=a(83117),s=(a(67294),a(3905)),l=a(34259),i=a(18679);const r={sidebar_position:10,title:"Delta Lake",slug:"/generated/ingestion/sources/delta-lake",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/delta-lake.md"},o="Delta Lake",p={unversionedId:"docs/generated/ingestion/sources/delta-lake",id:"version-0.10.5/docs/generated/ingestion/sources/delta-lake",title:"Delta Lake",description:"Incubating",source:"@site/versioned_docs/version-0.10.5/docs/generated/ingestion/sources/delta-lake.md",sourceDirName:"docs/generated/ingestion/sources",slug:"/generated/ingestion/sources/delta-lake",permalink:"/docs/generated/ingestion/sources/delta-lake",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/delta-lake.md",tags:[],version:"0.10.5",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Delta Lake",slug:"/generated/ingestion/sources/delta-lake",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/ingestion/sources/delta-lake.md"},sidebar:"overviewSidebar",previous:{title:"dbt",permalink:"/docs/generated/ingestion/sources/dbt"},next:{title:"Demo Data",permalink:"/docs/generated/ingestion/sources/demo-data"}},c={},d=[{value:"Important Capabilities",id:"important-capabilities",level:3},{value:"CLI based Ingestion",id:"cli-based-ingestion",level:3},{value:"Install the Plugin",id:"install-the-plugin",level:4},{value:"Starter Recipe",id:"starter-recipe",level:3},{value:"Config Details",id:"config-details",level:3},{value:"Usage Guide",id:"usage-guide",level:2},{value:"Delta Table on Local File System",id:"delta-table-on-local-file-system",level:3},{value:"Step 1",id:"step-1",level:4},{value:"Step 2",id:"step-2",level:4},{value:"Step 3",id:"step-3",level:4},{value:"Delta Table on S3",id:"delta-table-on-s3",level:3},{value:"Step 1",id:"step-1-1",level:4},{value:"Step 3",id:"step-3-1",level:4},{value:"Step 4",id:"step-4",level:4},{value:"Note",id:"note",level:3},{value:"Code Coordinates",id:"code-coordinates",level:3}],m={toc:d};function u(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"delta-lake"},"Delta Lake"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/support%20status-incubating-blue",alt:"Incubating"})),(0,s.kt)("h3",{id:"important-capabilities"},"Important Capabilities"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Capability"),(0,s.kt)("th",{parentName:"tr",align:null},"Status"),(0,s.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Extract Tags"),(0,s.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,s.kt)("td",{parentName:"tr",align:null},"Can extract S3 object/bucket tags if enabled")))),(0,s.kt)("p",null,"This plugin extracts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Column types and schema associated with each delta table"),(0,s.kt)("li",{parentName:"ul"},"Custom properties: number_of_files, partition_columns, table_creation_time, location, version etc.")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"If you are ingesting datasets from AWS S3, we recommend running the ingestion on a server in the same region to avoid high egress costs.")),(0,s.kt)("h3",{id:"cli-based-ingestion"},"CLI based Ingestion"),(0,s.kt)("h4",{id:"install-the-plugin"},"Install the Plugin"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pip install 'acryl-datahub[delta-lake]'\n")),(0,s.kt)("h3",{id:"starter-recipe"},"Starter Recipe"),(0,s.kt)("p",null,"Check out the following recipe to get started with ingestion! See ",(0,s.kt)("a",{parentName:"p",href:"#config-details"},"below")," for full configuration options."),(0,s.kt)("p",null,"For general pointers on writing and running a recipe, see our ",(0,s.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion#recipes"},"main recipe guide"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: delta-lake\n  config:\n    env: "PROD"\n    platform_instance: "my-delta-lake"\n    base_path: "/path/to/data/folder"\n\nsink:\n  # sink configs\n')),(0,s.kt)("h3",{id:"config-details"},"Config Details"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"options",label:"Options",default:!0,mdxType:"TabItem"},(0,s.kt)("p",null,"Note that a ",(0,s.kt)("inlineCode",{parentName:"p"},".")," is used to denote nested fields in the YAML recipe."),(0,s.kt)("div",{className:"config-table"},(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,s.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-main"},"base_path"),"\xa0",(0,s.kt)("abbr",{title:"Required"},"\u2705"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"Path to table (s3 or local file system). If path is not a delta table path then all subfolders will be scanned to detect and ingest delta tables.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-main"},"platform"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"The platform that this source connects to ",(0,s.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,s.kt)("span",{className:"default-value"},"delta-lake")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-main"},"platform_instance"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"The instance of the platform that all assets produced by this recipe belong to")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-main"},"relative_path"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"If set, delta-tables will be searched at location '<base_path>/<relative_path>' and URNs will be created using relative_path only.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-main"},"require_files"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"boolean"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"Whether DeltaTable should track files. Consider setting this to ",(0,s.kt)("inlineCode",{parentName:"td"},"False")," for large delta tables, resulting in significant memory reduction for ingestion process.When set to ",(0,s.kt)("inlineCode",{parentName:"td"},"False"),", number_of_files in delta table can not be reported. ",(0,s.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,s.kt)("span",{className:"default-value"},"True")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-main"},"version_history_lookback"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"integer"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"Number of previous version histories to be ingested. Defaults to 1. If set to -1 all version history will be ingested. ",(0,s.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,s.kt)("span",{className:"default-value"},"1")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-main"},"env"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"The environment that all assets produced by this connector belong to ",(0,s.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,s.kt)("span",{className:"default-value"},"PROD")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-main"},"s3"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"S3"))),(0,s.kt)("td",{parentName:"tr",align:"left"})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3."),(0,s.kt)("span",{className:"path-main"},"use_s3_bucket_tags"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"boolean"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"Whether or not to create tags in datahub from the s3 bucket ",(0,s.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,s.kt)("span",{className:"default-value"},"False")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3."),(0,s.kt)("span",{className:"path-main"},"use_s3_object_tags"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"boolean"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"# Whether or not to create tags in datahub from the s3 object ",(0,s.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,s.kt)("span",{className:"default-value"},"False")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3."),(0,s.kt)("span",{className:"path-main"},"aws_config"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"AwsConnectionConfig"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"AWS configuration")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3.aws_config."),(0,s.kt)("span",{className:"path-main"},"aws_region"),"\xa0",(0,s.kt)("abbr",{title:"Required if aws_config is set"},"\u2753"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"AWS region code.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3.aws_config."),(0,s.kt)("span",{className:"path-main"},"aws_access_key_id"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"AWS access key ID. Can be auto-detected, see ",(0,s.kt)("a",{parentName:"td",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html"},"the AWS boto3 docs")," for details.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3.aws_config."),(0,s.kt)("span",{className:"path-main"},"aws_endpoint_url"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"The AWS service endpoint. This is normally ",(0,s.kt)("a",{parentName:"td",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html"},"constructed automatically"),", but can be overridden here.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3.aws_config."),(0,s.kt)("span",{className:"path-main"},"aws_profile"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"Named AWS profile to use. Only used if access key / secret are unset. If not set the default will be used")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3.aws_config."),(0,s.kt)("span",{className:"path-main"},"aws_proxy"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"map(str,string)"))),(0,s.kt)("td",{parentName:"tr",align:"left"})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3.aws_config."),(0,s.kt)("span",{className:"path-main"},"aws_secret_access_key"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"AWS secret access key. Can be auto-detected, see ",(0,s.kt)("a",{parentName:"td",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html"},"the AWS boto3 docs")," for details.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3.aws_config."),(0,s.kt)("span",{className:"path-main"},"aws_session_token"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"AWS session token. Can be auto-detected, see ",(0,s.kt)("a",{parentName:"td",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html"},"the AWS boto3 docs")," for details.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3.aws_config."),(0,s.kt)("span",{className:"path-main"},"aws_role"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"One of string, union(anyOf), string, AwsAssumeRoleConfig"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are documented at ",(0,s.kt)("a",{parentName:"td",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role"},"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3.aws_config.aws_role."),(0,s.kt)("span",{className:"path-main"},"RoleArn"),"\xa0",(0,s.kt)("abbr",{title:"Required if aws_role is set"},"\u2753"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"ARN of the role to assume.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"s3.aws_config.aws_role."),(0,s.kt)("span",{className:"path-main"},"ExternalId"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"string"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"External ID to use when assuming the role.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-main"},"table_pattern"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"AllowDenyPattern"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"regex patterns for tables to filter in ingestion. ",(0,s.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,s.kt)("span",{className:"default-value"},"{","'","allow","'",": ","[","'",".","*","'","]",", ","'","deny","'",": ","[","]",", ","'","ignoreCase","'",": True","}")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"table_pattern."),(0,s.kt)("span",{className:"path-main"},"allow"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"array(string)"))),(0,s.kt)("td",{parentName:"tr",align:"left"})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"table_pattern."),(0,s.kt)("span",{className:"path-main"},"deny"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"array(string)"))),(0,s.kt)("td",{parentName:"tr",align:"left"})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:"left"},(0,s.kt)("div",{className:"path-line"},(0,s.kt)("span",{className:"path-prefix"},"table_pattern."),(0,s.kt)("span",{className:"path-main"},"ignoreCase"))," ",(0,s.kt)("div",{className:"type-name-line"},(0,s.kt)("span",{className:"type-name"},"boolean"))),(0,s.kt)("td",{parentName:"tr",align:"left"},"Whether to ignore case sensitivity during pattern matching. ",(0,s.kt)("div",{className:"default-line default-line-with-docs"},"Default: ",(0,s.kt)("span",{className:"default-value"},"True")))))))),(0,s.kt)(i.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSONSchema")," for this configuration is inlined below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "title": "DeltaLakeSourceConfig",\n  "description": "Any source that connects to a platform should inherit this class",\n  "type": "object",\n  "properties": {\n    "env": {\n      "title": "Env",\n      "description": "The environment that all assets produced by this connector belong to",\n      "default": "PROD",\n      "type": "string"\n    },\n    "platform_instance": {\n      "title": "Platform Instance",\n      "description": "The instance of the platform that all assets produced by this recipe belong to",\n      "type": "string"\n    },\n    "base_path": {\n      "title": "Base Path",\n      "description": "Path to table (s3 or local file system). If path is not a delta table path then all subfolders will be scanned to detect and ingest delta tables.",\n      "type": "string"\n    },\n    "relative_path": {\n      "title": "Relative Path",\n      "description": "If set, delta-tables will be searched at location \'<base_path>/<relative_path>\' and URNs will be created using relative_path only.",\n      "type": "string"\n    },\n    "platform": {\n      "title": "Platform",\n      "description": "The platform that this source connects to",\n      "default": "delta-lake",\n      "const": "delta-lake",\n      "type": "string"\n    },\n    "table_pattern": {\n      "title": "Table Pattern",\n      "description": "regex patterns for tables to filter in ingestion.",\n      "default": {\n        "allow": [\n          ".*"\n        ],\n        "deny": [],\n        "ignoreCase": true\n      },\n      "allOf": [\n        {\n          "$ref": "#/definitions/AllowDenyPattern"\n        }\n      ]\n    },\n    "version_history_lookback": {\n      "title": "Version History Lookback",\n      "description": "Number of previous version histories to be ingested. Defaults to 1. If set to -1 all version history will be ingested.",\n      "default": 1,\n      "type": "integer"\n    },\n    "require_files": {\n      "title": "Require Files",\n      "description": "Whether DeltaTable should track files. Consider setting this to `False` for large delta tables, resulting in significant memory reduction for ingestion process.When set to `False`, number_of_files in delta table can not be reported.",\n      "default": true,\n      "type": "boolean"\n    },\n    "s3": {\n      "$ref": "#/definitions/S3"\n    }\n  },\n  "required": [\n    "base_path"\n  ],\n  "additionalProperties": false,\n  "definitions": {\n    "AllowDenyPattern": {\n      "title": "AllowDenyPattern",\n      "description": "A class to store allow deny regexes",\n      "type": "object",\n      "properties": {\n        "allow": {\n          "title": "Allow",\n          "description": "List of regex patterns to include in ingestion",\n          "default": [\n            ".*"\n          ],\n          "type": "array",\n          "items": {\n            "type": "string"\n          }\n        },\n        "deny": {\n          "title": "Deny",\n          "description": "List of regex patterns to exclude from ingestion.",\n          "default": [],\n          "type": "array",\n          "items": {\n            "type": "string"\n          }\n        },\n        "ignoreCase": {\n          "title": "Ignorecase",\n          "description": "Whether to ignore case sensitivity during pattern matching.",\n          "default": true,\n          "type": "boolean"\n        }\n      },\n      "additionalProperties": false\n    },\n    "AwsAssumeRoleConfig": {\n      "title": "AwsAssumeRoleConfig",\n      "type": "object",\n      "properties": {\n        "RoleArn": {\n          "title": "Rolearn",\n          "description": "ARN of the role to assume.",\n          "type": "string"\n        },\n        "ExternalId": {\n          "title": "Externalid",\n          "description": "External ID to use when assuming the role.",\n          "type": "string"\n        }\n      },\n      "required": [\n        "RoleArn"\n      ]\n    },\n    "AwsConnectionConfig": {\n      "title": "AwsConnectionConfig",\n      "description": "Common AWS credentials config.\\n\\nCurrently used by:\\n    - Glue source\\n    - SageMaker source\\n    - dbt source",\n      "type": "object",\n      "properties": {\n        "aws_access_key_id": {\n          "title": "Aws Access Key Id",\n          "description": "AWS access key ID. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",\n          "type": "string"\n        },\n        "aws_secret_access_key": {\n          "title": "Aws Secret Access Key",\n          "description": "AWS secret access key. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",\n          "type": "string"\n        },\n        "aws_session_token": {\n          "title": "Aws Session Token",\n          "description": "AWS session token. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",\n          "type": "string"\n        },\n        "aws_role": {\n          "title": "Aws Role",\n          "description": "AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are documented at https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role",\n          "anyOf": [\n            {\n              "type": "string"\n            },\n            {\n              "type": "array",\n              "items": {\n                "anyOf": [\n                  {\n                    "type": "string"\n                  },\n                  {\n                    "$ref": "#/definitions/AwsAssumeRoleConfig"\n                  }\n                ]\n              }\n            }\n          ]\n        },\n        "aws_profile": {\n          "title": "Aws Profile",\n          "description": "Named AWS profile to use. Only used if access key / secret are unset. If not set the default will be used",\n          "type": "string"\n        },\n        "aws_region": {\n          "title": "Aws Region",\n          "description": "AWS region code.",\n          "type": "string"\n        },\n        "aws_endpoint_url": {\n          "title": "Aws Endpoint Url",\n          "description": "The AWS service endpoint. This is normally [constructed automatically](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html), but can be overridden here.",\n          "type": "string"\n        },\n        "aws_proxy": {\n          "title": "Aws Proxy",\n          "description": "A set of proxy configs to use with AWS. See the [botocore.config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html) docs for details.",\n          "type": "object",\n          "additionalProperties": {\n            "type": "string"\n          }\n        }\n      },\n      "required": [\n        "aws_region"\n      ],\n      "additionalProperties": false\n    },\n    "S3": {\n      "title": "S3",\n      "type": "object",\n      "properties": {\n        "aws_config": {\n          "title": "Aws Config",\n          "description": "AWS configuration",\n          "allOf": [\n            {\n              "$ref": "#/definitions/AwsConnectionConfig"\n            }\n          ]\n        },\n        "use_s3_bucket_tags": {\n          "title": "Use S3 Bucket Tags",\n          "description": "Whether or not to create tags in datahub from the s3 bucket",\n          "default": false,\n          "type": "boolean"\n        },\n        "use_s3_object_tags": {\n          "title": "Use S3 Object Tags",\n          "description": "# Whether or not to create tags in datahub from the s3 object",\n          "default": false,\n          "type": "boolean"\n        }\n      },\n      "additionalProperties": false\n    }\n  }\n}\n')))),(0,s.kt)("h2",{id:"usage-guide"},"Usage Guide"),(0,s.kt)("p",null,"If you are new to ",(0,s.kt)("a",{parentName:"p",href:"https://delta.io/"},"Delta Lake")," and want to test out a simple integration with Delta Lake and DataHub, you can follow this guide. "),(0,s.kt)("h3",{id:"delta-table-on-local-file-system"},"Delta Table on Local File System"),(0,s.kt)("h4",{id:"step-1"},"Step 1"),(0,s.kt)("p",null,"Create a delta table using the sample PySpark code below if you don't have a delta table you can point to."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'import uuid\nimport random\nfrom pyspark.sql import SparkSession\nfrom delta.tables import DeltaTable\n\ndef generate_data():\n    return [(y, m, d, str(uuid.uuid4()), str(random.randrange(10000) % 26 + 65) * 3, random.random()*10000)\n    for d in range(1, 29)\n    for m in range(1, 13)\n    for y in range(2000, 2021)]\n\njar_packages = ["org.apache.hadoop:hadoop-aws:3.2.3", "io.delta:delta-core_2.12:1.2.1"]\nspark = SparkSession.builder \\\n    .appName("quickstart") \\\n    .master("local[*]") \\\n    .config("spark.jars.packages", ",".join(jar_packages)) \\\n    .config("spark.sql.extensions", "io.delta.sql.DeltaSparkSessionExtension") \\\n    .config("spark.sql.catalog.spark_catalog", "org.apache.spark.sql.delta.catalog.DeltaCatalog") \\\n    .getOrCreate()\n\ntable_path = "quickstart/my-table"\ncolumns = ["year", "month", "day", "sale_id", "customer", "total_cost"]\nspark.sparkContext.parallelize(generate_data()).toDF(columns).repartition(1).write.format("delta").save(table_path)\n\ndf = spark.read.format("delta").load(table_path)\ndf.show()\n\n')),(0,s.kt)("h4",{id:"step-2"},"Step 2"),(0,s.kt)("p",null,"Create a datahub ingestion yaml file (delta.dhub.yaml) to ingest metadata from the delta table you just created."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'source:\n  type: "delta-lake"\n  config:\n    base_path:  "quickstart/my-table"\n    \nsink:\n  type: "datahub-rest"\n  config:\n    server: "http://localhost:8080"\n')),(0,s.kt)("p",null,"Note: Make sure you run the Spark code as well as recipe from same folder otherwise use absolute paths."),(0,s.kt)("h4",{id:"step-3"},"Step 3"),(0,s.kt)("p",null,"Execute the ingestion recipe:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"datahub ingest -c delta.dhub.yaml\n")),(0,s.kt)("h3",{id:"delta-table-on-s3"},"Delta Table on S3"),(0,s.kt)("h4",{id:"step-1-1"},"Step 1"),(0,s.kt)("p",null,"Set up your AWS credentials by creating an AWS credentials config file; typically in '$HOME/.aws/credentials'."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"[my-creds]\naws_access_key_id: ######\naws_secret_access_key: ######\n")),(0,s.kt)("p",null,"Step 2: Create a Delta Table using the PySpark sample code below unless you already have Delta Tables on your S3. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from pyspark.sql import SparkSession\nfrom delta.tables import DeltaTable\nfrom configparser import ConfigParser\nimport uuid\nimport random\ndef generate_data():\n    return [(y, m, d, str(uuid.uuid4()), str(random.randrange(10000) % 26 + 65) * 3, random.random()*10000)\n    for d in range(1, 29)\n    for m in range(1, 13)\n    for y in range(2000, 2021)]\n\njar_packages = ["org.apache.hadoop:hadoop-aws:3.2.3", "io.delta:delta-core_2.12:1.2.1"]\nspark = SparkSession.builder \\\n    .appName("quickstart") \\\n    .master("local[*]") \\\n    .config("spark.jars.packages", ",".join(jar_packages)) \\\n    .config("spark.sql.extensions", "io.delta.sql.DeltaSparkSessionExtension") \\\n    .config("spark.sql.catalog.spark_catalog", "org.apache.spark.sql.delta.catalog.DeltaCatalog") \\\n    .getOrCreate()\n\n\nconfig_object = ConfigParser()\nconfig_object.read("$HOME/.aws/credentials")\nprofile_info = config_object["my-creds"]\naccess_id = profile_info["aws_access_key_id"]\naccess_key = profile_info["aws_secret_access_key"]\n\nhadoop_conf = spark._jsc.hadoopConfiguration()\nhadoop_conf.set("fs.s3a.impl", "org.apache.hadoop.fs.s3a.S3AFileSystem")\nhadoop_conf.set("fs.s3a.aws.credentials.provider", "org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider")\nhadoop_conf.set("fs.s3a.access.key", access_id)\nhadoop_conf.set("fs.s3a.secret.key", access_key)\n\ntable_path = "s3a://my-bucket/my-folder/sales-table"\ncolumns = ["year", "month", "day", "sale_id", "customer", "total_cost"]\nspark.sparkContext.parallelize(generate_data()).toDF(columns).repartition(1).write.format("delta").save(table_path)\ndf = spark.read.format("delta").load(table_path)\ndf.show()\n\n')),(0,s.kt)("h4",{id:"step-3-1"},"Step 3"),(0,s.kt)("p",null,"Create a datahub ingestion yaml file (delta.s3.dhub.yaml) to ingest metadata from the delta table you just created."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "delta-lake"\n  config:\n    base_path:  "s3://my-bucket/my-folder/sales-table"\n    s3:\n      aws_config:\n        aws_access_key_id: <<Access key>>\n        aws_secret_access_key: <<secret key>>\n    \nsink:\n  type: "datahub-rest"\n  config:\n    server: "http://localhost:8080"\n')),(0,s.kt)("h4",{id:"step-4"},"Step 4"),(0,s.kt)("p",null,"Execute the ingestion recipe:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"datahub ingest -c delta.s3.dhub.yaml\n")),(0,s.kt)("h3",{id:"note"},"Note"),(0,s.kt)("p",null,"The above recipes are minimal recipes. Please refer to ",(0,s.kt)("a",{parentName:"p",href:"#config-details"},"Config Details")," section for the full configuration."),(0,s.kt)("h3",{id:"code-coordinates"},"Code Coordinates"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Class Name: ",(0,s.kt)("inlineCode",{parentName:"li"},"datahub.ingestion.source.delta_lake.source.DeltaLakeSource")),(0,s.kt)("li",{parentName:"ul"},"Browse on ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/source/delta_lake/source.py"},"GitHub"))),(0,s.kt)("h2",null,"Questions"),(0,s.kt)("p",null,"If you've got any questions on configuring ingestion for Delta Lake, feel free to ping us on ",(0,s.kt)("a",{parentName:"p",href:"https://slack.datahubproject.io"},"our Slack"),"."))}u.isMDXComponent=!0}}]);